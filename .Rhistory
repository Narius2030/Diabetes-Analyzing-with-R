<<<<<<< HEAD
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))))
}
for (col in colnames(diabetes)) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
print("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))))
}
for (col in colnames(diabetes)) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
paste("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))))
}
for (col in colnames(diabetes)) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
print(paste("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2)))
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))))
}
for (col in colnames(diabetes)) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
# Liệt kê tỉ lệ giá trị ngoại lại trong từng cột
print(paste("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2)))
}
for (col in colnames(diabetes)) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(outlier_rate, regular_rate)
)
# Liệt kê tỉ lệ giá trị ngoại lại trong từng cột
print(paste(col, "-", "Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2)))
}
outlier_col = c("BloodPressure", "Insulin", "BMI", "DiabetesPedigreeFunction")
for (col in outlier_col) {
# Vẽ trực quan những cột có tỉ lệ ngoại lai >= 2.3%
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(outlier_rate, 2), ", Regular Values (%):", round(regular_rate, 2))))
}
calculate_rate <- function(inp) {
num_outliers <- sum(find_outliers(diabetes[, col]))
num_regular <- length(diabetes[, col]) - num_outliers
outlier_rate <- num_outliers / length(diabetes[, col]) * 100
regular_rate <- num_regular / length(diabetes[, col]) * 100
rates <- list(outlier=outlier_rate, regular=regular_rate)
return rates
calculate_rate <- function(inp) {
num_outliers <- sum(find_outliers(inp))
num_regular <- length(inp) - num_outliers
outlier_rate <- num_outliers / length(inp) * 100
regular_rate <- num_regular / length(inp) * 100
rates <- list(outlier=outlier_rate, regular=regular_rate)
return rates
calculate_rate <- function(inp) {
num_outliers <- sum(find_outliers(inp))
num_regular <- length(inp) - num_outliers
outlier_rate <- num_outliers / length(inp) * 100
regular_rate <- num_regular / length(inp) * 100
rates <- list(outlier=outlier_rate, regular=regular_rate)
}
calculate_rate <- function(inp) {
num_outliers <- sum(find_outliers(inp))
num_regular <- length(inp) - num_outliers
outlier_rate <- num_outliers / length(inp) * 100
regular_rate <- num_regular / length(inp) * 100
rates <- list(outlier=outlier_rate, regular=regular_rate)
return (rates)
}
for (col in colnames(diabetes)) {
rates <- calculate_rate(diabetes[, col])
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(rates$outlier, rate$regular)
)
# Liệt kê tỉ lệ giá trị ngoại lại trong từng cột
print(paste(col, "-", "Total Outliers (%):", round(rates$outlier, 2), ", Regular Values (%):", round(rates$outlier, 2)))
}
for (col in colnames(diabetes)) {
rates <- calculate_rate(diabetes[, col])
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(rates$outlier, rates$regular)
)
# Liệt kê tỉ lệ giá trị ngoại lại trong từng cột
print(paste(col, "-", "Total Outliers (%):", round(rates$outlier, 2), ", Regular Values (%):", round(rates$outlier, 2)))
}
outlier_col = c("BloodPressure", "Insulin", "BMI", "DiabetesPedigreeFunction")
for (col in outlier_col) {
rates <- calculate_rate(diabetes[, col])
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(rates$outlier, rates$regular)
)
# Vẽ trực quan những cột có tỉ lệ ngoại lai >= 2.3%
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(rates$outlier, 2), ", Regular Values (%):", round(rates$regular, 2))))
}
# Boxplot cho Age
boxplot(diabetes$Age,
col="#ff0066",
main="Boxplot for Descriptive Analysis of Age")
# Boxplot cho Pregnancies
boxplot(diabetes$Pregnancies,
col="yellow",
main="Boxplot for Descriptive Analysis of Pregnancy")
# Boxplot cho Outcome và Glucose theo người mắc bệnh và không
diabetes_groups <- cut(diabetes$Outcome, c(-Inf, 0, Inf), labels = c("Không bệnh", "Bệnh"))
ggplot(data = diabetes, aes(x = diabetes_groups, y = Glucose)) +
geom_boxplot(fill = c("lightblue", "green")) +
labs(x = "Outcome", y = "Glucose (mg/dL)")
# Calculate the correlation between DiabetesPedigreeFunction and BMI
cor(diabetes$DiabetesPedigreeFunction, diabetes$BMI)
# 0.22
matrix <- as.matrix(diabetes)
heatmap((matrix))
ggplot(data = diabetes, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplot(data = diabetes, aes(x=DiabetesPedigreeFunction, y=BMI, fill=Outcome)) +
geom_tile()
ggplot(data = diabetes, aes(x=DiabetesPedigreeFunction, y=BMI, fill=Outcome)) + geom_tile()
ggplot(data = diabetes, aes(x=DiabetesPedigreeFunction, y=Age, fill=Outcome)) + geom_tile()
install.packages("lattice")
libray(lattice)
library(lattice)
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
install.packages("reshape2")
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
# creating correlation matrix
corr_mat <- round(cor(diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4)
# creating correlation matrix
corr_mat <- round(cor(diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
knitr::opts_chunk$set(echo = TRUE)
ggplot(data=diabetes, aes(x=Insulin, y=Glucose, group=1)) +
geom_line(color="red")+
geom_point()
library(reader)
diabetes <- read.csv('diabetes.csv')
diabetes
library(ggplot2)
ggplot(data=diabetes, aes(x=Insulin, y=Glucose, group=1)) +
geom_line(color="red")+
geom_point()
ggplot(data = diabetes, aes(x = Glucose)) +
geom_histogram()
ggplot(data=diabetes, aes(x=Insulin, y=Glucose, group=1)) +
geom_line(color="red")
ggplot(data = diabetes, aes(x = Glucose)) +
geom_histogram()
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
ggplot(data=diabetes, aes(x=Insulin, y=Glucose, group=1)) +
geom_line(color="red")
plot(density(diabetes$Glucose),
col="yellow",
main="Density Plot for Glucose",
xlab="Glucose",
ylab="Density")
polygon(density(diabetes$Glucose),
col="#ccff66")
diabetes$BMI_Category <- cut(diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
diabetes
ggplot(diabetes, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Education/Uni/Statistic with R/Final_Project/R-diabetes")
wine <- read.csv("winequality.csv", header = TRUE, sep=",")
head(wine)
dim(wine)
barplot(table(wine$quality))
wine$taste <- ifelse(wine$quality < 5, "bad", "good")
wine$taste[wine$quality == 5] <- "normal"
wine$taste[wine$quality == 6] <- "normal"
wine$taste <- as.factor(wine$taste)
str(wine$taste)
wine <- read.csv("winequality.csv", header = TRUE, sep=",")
head(wine)
dim(wine)
wine$taste <- ifelse(wine$quality < 5, "bad", "good")
wine$taste[wine$quality == 5] <- "normal"
wine$taste[wine$quality == 6] <- "normal"
wine$taste <- as.factor(wine$taste)
str(wine$taste)
head(wine)
dim(wine)
barplot(table(wine$taste))
table(wine$taste)
set.seed(123)
samp <- sample(nrow(wine), 0.8 * nrow(wine))
train <- wine[samp, ]
test <- wine[-samp, ]
library(ggplot2)
ggplot(wine,aes(fixed.acidity,volatile.acidity))+ geom_point(aes(color=taste))
ggplot(wine,aes(alcohol)) + geom_histogram(aes(fill=taste),color='black',bins=50)
dim(test)
library(randomForest)
install.packages('randomForest')
library(randomForest)
model <- randomForest(taste ~ . - quality, data = train, ntree = 1000, mtry = 5)
model
model$confusion
model <- randomForest(taste ~ . - quality, data = train, ntree = 1000, mtry = 5)
model
prediction <- predict(model, newdata = test)
table(prediction, test$taste)
prediction
results<-cbind(prediction,test$taste)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$taste) / nrow(test) # The output is as shown below
setwd("C:/Education/Uni/Statistic with R/Final_Project/R-diabetes")
wine <- read.csv("diabetes.csv", header = TRUE, sep=",")
head(diabetes)
dim(diabetes)
setwd("C:/Education/Uni/Statistic with R/Final_Project/R-diabetes")
diabetes <- read.csv("diabetes.csv")
head(diabetes)
dim(diabetes)
diabetes$BMI_Category <- cut(diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
ggplot(diabetes, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
diabetes$BMI_Category<- as.factor(diabetes$BMI_Category)
str(diabetes)
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
library(ggplot2)
dim(test)
library(randomForest)
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 1000, mtry = 5)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$taste) / nrow(test) # The output is as shown below
sum(prediction==test$taste) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 900, mtry = 5)
model
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 500, mtry = 5)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 500, mtry = 3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 500, mtry = 4)
model
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 100, mtry = 4)
model
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 100, mtry = 2)
model
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 100, mtry = 4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 1000, mtry = 4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 5, mtry = 4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
renv::init
renv::init()
knitr::opts_chunk$set(echo = TRUE)
install.packages('reader')
library(reader)
diabetes <- read.csv('diabetes.csv')
diabetes
str(diabetes)
summary(diabetes)
library(ggplot2)
# Boxplot cho Age
boxplot(diabetes$Age,
col="#ff0066",
main="Boxplot for Descriptive Analysis of Age")
# Boxplot cho Pregnancies
boxplot(diabetes$Pregnancies,
col="yellow",
main="Boxplot for Descriptive Analysis of Pregnancy")
# Boxplot cho Outcome và Glucose theo người mắc bệnh và không
diabetes_groups <- cut(diabetes$Outcome, c(-Inf, 0, Inf), labels = c("Không bệnh", "Bệnh"))
ggplot(data = diabetes, aes(x = diabetes_groups, y = Glucose)) +
geom_boxplot(fill = c("lightblue", "green")) +
labs(x = "Outcome", y = "Glucose (mg/dL)")
ggplot(data=diabetes, aes(x=Insulin, y=Glucose, group=1)) +
geom_line(color="red")
plot(density(diabetes$Glucose),
col="yellow",
main="Density Plot for Glucose",
xlab="Glucose",
ylab="Density")
polygon(density(diabetes$Glucose),
col="#ccff66")
ggplot(data = diabetes, aes(x = Glucose, y = Outcome)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Mối quan hệ giữa nồng độ glucose và kết quả bệnh tiểu đường",
x = "Nồng độ glucose (mg/dL)",
y = "Kết quả (1 = mắc bệnh, 0 = không mắc bệnh)")
ggplot(data = diabetes, aes(x = SkinThickness, y = Outcome)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Mối quan hệ giữa độ dày của da và kết quả bệnh tiểu đường",
x = "độ dày da (mm)",
y = "Kết quả (1 = mắc bệnh, 0 = không mắc bệnh)")
ggplot(data = diabetes, aes(x = Pregnancies, y = Outcome)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Mối quan hệ giữa số lần mang thai và kết quả bệnh tiểu đường",
x = "Số lần mang thai (lần)",
y = "Kết quả (1 = mắc bệnh, 0 = không mắc bệnh)")
sum_of_nan <- sum(is.na(diabetes))
paste("Tổng số giá trị rỗng trong dataset:", sum_of_nan)
for (col in colnames(diabetes)) {
nan_of_col <- sum(is.na(diabetes[, col]))
print(paste("Số giá trị rỗng trong cột", col, ":", nan_of_col))
}
find_outliers <- function(inp, na.rm = TRUE) {
i.qnt <- quantile(inp, probs = c(0.25, 0.75), na.rm = na.rm)
i.max <- 1.5 * IQR(inp, na.rm = na.rm)
outliers <- inp < (i.qnt[1] - i.max) | inp > (i.qnt[2] + i.max)
return(outliers)
}
calculate_rate <- function(inp) {
num_outliers <- sum(find_outliers(inp))
num_regular <- length(inp) - num_outliers
outlier_rate <- num_outliers / length(inp) * 100
regular_rate <- num_regular / length(inp) * 100
rates <- list(outlier=outlier_rate, regular=regular_rate)
return (rates)
}
for (col in colnames(diabetes)) {
rates <- calculate_rate(diabetes[, col])
# Liệt kê tỉ lệ giá trị ngoại lại trong từng cột
print(paste(col, "-", "Total Outliers (%):", round(rates$outlier, 2), ", Regular Values (%):", round(rates$outlier, 2)))
}
outlier_col = c("BloodPressure", "Insulin", "BMI", "DiabetesPedigreeFunction")
for (col in outlier_col) {
rates <- calculate_rate(diabetes[, col])
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(rates$outlier, rates$regular)
)
# Vẽ trực quan những cột có tỉ lệ ngoại lai >= 2.3%
print(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste("Outlier Rate vs Regular Value Rate in", col),
caption = paste0("Total Outliers (%):", round(rates$outlier, 2), ", Regular Values (%):", round(rates$regular, 2))))
}
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
=======
install.packages(c("googledrive", "readr"))
library(googledrive)
library(readr)
setwd("D:/DaiHoc/nam3/R/PJCuoiKi")
install.packages(c("googledrive", "readr"))
library(googledrive)
library(readr)
install.packages(c("googledrive", "readr"))
# Đường link chia sẻ của file CSV trên Google Drive
link<-"https://drive.google.com/file/d/15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh/view?usp=drive_link"
# Lấy ID của file từ đường link
file_id <- gsub(".*/([^/]+)/.*", "\\1", link)
# Xây dựng đường link thực tế cho Google Drive API
drive_link <- sprintf("https://drive.google.com/uc?id=%s", file_id)
diabetes<-read_csv(drive_link)
# Đường link chia sẻ của file CSV trên Google Drive
link<-"https://drive.google.com/file/d/15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh/view?usp=drive_link"
# Lấy ID của file từ đường link
file_id <- gsub(".*/([^/]+)/.*", "\\1", link)
# Xây dựng đường link thực tế cho Google Drive API
drive_link <- sprintf("https://drive.google.com/uc?id=%s", file_id)
diabetes<-read_csv(drive_link)
# Đường link chia sẻ của file CSV trên Google Drive
link <- "https://drive.google.com/file/d/15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh/view?usp=drive_link"
# Lấy ID của file từ đường link
file_id <- gsub(".*/([^/]+)/.*", "\\1", link)
# Xây dựng đường link thực tế cho Google Drive API
drive_link <- sprintf("https://drive.google.com/uc?id=%s", file_id)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv(drive_link)
library(googledrive)
library(readr)
library(googledrive)
library(readr)
# Đường link chia sẻ của file CSV trên Google Drive
link <- "https://drive.google.com/file/d/15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh/view?usp=drive_link"
# Lấy ID của file từ đường link
file_id <- gsub(".*/([^/]+)/.*", "\\1", link)
# Xây dựng đường link thực tế cho Google Drive API
drive_link <- sprintf("https://drive.google.com/uc?id=%s", file_id)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv(drive_link)
# Hiển thị dữ liệu
print(diabetes)
# Đường link chia sẻ của file CSV trên Google Drive
link <- "https://drive.google.com/file/d/15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh/view?usp=drive_link"
# Lấy ID của file từ đường link
file_id <- gsub(".*/([^/]+)/.*", "\\1", link)
print(file_id)
# Xây dựng đường link thực tế cho Google Drive API
drive_link <- sprintf("https://drive.google.com/uc?id=%s", file_id)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv(drive_link)
# Hiển thị dữ liệu
diabetes
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
spec(diabetes)
# Hiển thị dữ liệu
diabetes
install.packages("readr")
install.packages("readr")
library(readr)
library(readr)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
spec(diabetes)
# Hiển thị dữ liệu
diabetes
head(diabetes)
summary(diabetes)
str(diabetes)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
suppressMessages(spec(diabetes))
# Hiển thị dữ liệu
diabetes
str(diabetes)
str(diabetes)
colnames(diabetes)
# Định nghĩa hàm thống kê cho mỗi cột
summary_stats <- function(column) {
mean_value <- mean(column, na.rm = TRUE)
median_value <- median(column, na.rm = TRUE)
# Tính giá trị phổ biến (mode)
frequency_table <- table(column)
mode_value <- as.numeric(names(frequency_table)[which.max(frequency_table)])
# Tạo một list chứa các giá trị thống kê
result <- list(
Mean = mean_value,
Median = median_value,
Mode = mode_value
)
return(result)
}
# Sử dụng lapply để áp dụng hàm cho mỗi cột của dataframe
column_stats <- lapply(diabetes, summary_stats)
# In kết quả
print(column_stats)
na_count<-colSums(diabetes)
na_count<-colSums(diabetes,is.na)
na_count<-colSums(diabetes,is.na)
na_count<-colSums(sapply(diabetes,is.na))
na_count
library(readr)
library(dplyr)
library(readr)
library(dplyr)
library(readr)
library(dplyr)
diabetes_median<- diabetes %>%
na.aggregate(type = "median", na.rm = TRUE)
diabetes_median<- diabetes %>%
na.aggregate(type = "median", na.rm = TRUE)
diabetes_median<- diabetes %>%
na.aggregate(type = "median", na.rm = TRUE)
diabetes_median<- diabetes %>%
na.aggregate(type = "median", na.rm = TRUE)
install.packages(c("dplyr", "zoo"))
install.packages(c("dplyr", "zoo"))
library(readr)
library(dplyr)
library(zoo)
library(readr)
library(dplyr)
library(zoo)
diabetes_median <- diabetes %>%
na.aggregate(type = "median", na.rm = TRUE)
diabetes_median <- diabetes %>%
na.aggregate(type = "median", na.rm = TRUE)
diabetes_median
diabetes_median <- diabetes %>%
na.aggregate(type = "mean", na.rm = TRUE)
diabetes_median <- diabetes %>%
na.aggregate(type = "mean", na.rm = TRUE)
diabetes_mean <- diabetes %>%
mutate_all(~ ifelse(is.na(.), mean(., na.rm = TRUE), .))
diabetes_median <- diabetes %>%
mutate_all(~ ifelse(is.na(.), median(., na.rm = TRUE), .))
fill_mode <- function(x) {
mode_val <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_val
return(x)
}
diabetes_mode <- diabetes %>%
mutate_all(fill_mode)
fill_mode <- function(x) {
mode_val <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_val
return(x)
}
diabetes_mode <- diabetes %>%
mutate_all(fill_mode)
diabetes_mode
fill_mode <- function(x) {
mode_val <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_val
return(x)
}
diabetes_mode <- diabetes %>%
mutate_all(fill_mode)
x <- c("A", "B", "A", "C", "B", "A", "A", "C")
x
#> A B C
#> 4 2 2
fill_mode <- function(x) {
mode_val <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_val
return(x)
}
diabetes_mode <- diabetes %>%
mutate_all(fill_mode)
x <- c("A", "B", "A", "C", "B", "A", "A", "C")
table(x)
#> A B C
#> 4 2 2
fill_mode <- function(x) {
mode_val <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_val
return(x)
}
diabetes_mode <- diabetes %>%
mutate_all(fill_mode)
boxplot(diabetes,main="Boxplot of Data")
boxplot(diabetes,main="Boxplot of Data")
z_scores <- scale(data)
boxplot(diabetes,main="Boxplot of Data")
# Giả sử diabetes là dataframe của bạn
diabetes_z <- scale(diabetes)
boxplot(diabetes,main="Boxplot of Data")
# Giả sử diabetes là dataframe của bạn
diabetes_z <- scale(diabetes)
diabetes_z
diabetes_features <- diabetes %>%
select(-'Outcome')
diabetes_z <- scale(diabetes)
diabetes_z
diabetes_features <- diabetes %>%
select(-'Outcome')
diabetes_z <- scale(diabetes)
diabetes_z
diabetes_features <- diabetes %>%
select(-'Outcome')
diabetes_z <- scale(diabetes_features)
diabetes_z
# Vẽ biểu đồ heatmap của ma trận Z-score
heatmap(diabetes_z,
main = "Heatmap of Z-scores",
xlab = "Features",
ylab = "Observations",
col = colorRampPalette(c("blue", "white", "red"))(50))  # Chọn màu sắc
install.packages("readr")
install.packages(c("dplyr", "zoo"))
install.packages("pheatmap")
install.packages("readr")
library(readr)
library(dplyr)
library(zoo)
library(pheatmap)
library(readr)
library(dplyr)
library(zoo)
library(pheatmap)
library(readr)
library(dplyr)
library(zoo)
library(pheatmap)
install.packages("readr")
install.packages(c("dplyr", "zoo"))
install.packages("pheatmap")
library(readr)
library(dplyr)
library(zoo)
library(pheatmap)
library(readr)
library(dplyr)
library(zoo)
library(pheatmap)
library(readr)
library(dplyr)
library(zoo)
library(pheatmap)
pheatmap(diabetes_z,
main = "Heatmap of Z-scores",
cluster_cols = FALSE,  # Không gom cột
cluster_rows = FALSE)  # Không gom hàng
# Vẽ scatter plot cho toàn bộ dataframe
pairs(diabetes_z, main = "Scatter Plot of Z-scores")
library(readr)
library(dplyr)
library(zoo)
library(ggplot2)
install.packages("readr")
install.packages(c("dplyr", "zoo"))
install.packages("ggplot2")
install.packages("readr")
install.packages(c("dplyr", "zoo"))
install.packages("ggplot2")
install.packages("readr")
install.packages(c("dplyr", "zoo"))
install.packages("ggplot2")
library(readr)
library(dplyr)
library(zoo)
library(ggplot2)
library(readr)
library(dplyr)
library(zoo)
library(ggplot2)
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
ggplot(df, aes(x = x, y = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
}
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
ggplot(df, aes(x = x, y = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
}
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
# Vẽ scatter plot bằng ggplot2 và sử dụng print để hiển thị
print(ggplot(df, aes(x = x, y = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
)
}
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
# Vẽ scatter plot bằng ggplot2 và sử dụng print để hiển thị
print(ggplot(df, aes(x = x, y = y, color = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
)
}
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
# Vẽ scatter plot bằng ggplot2 và sử dụng print để hiển thị
print(ggplot(df, aes(x = x, y = y, color = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
)
}
diabetes_features <- diabetes %>%
select(-'Outcome')
diabetes_z <- scale(diabetes_features)
diabetes_z
Z-score (z-score standardization) được tính bằng cách sử dụng công thức sau:
Z-score (z-score standardization) được tính bằng cách sử dụng công thức sau:
Z-score (z-score standardization) được tính bằng cách sử dụng công thức sau:
Z-score (z-score standardization) được tính bằng cách sử dụng công thức sau:
>>>>>>> 5a240992b1a8d4723c49ab54bb15d644c8a3bef0
