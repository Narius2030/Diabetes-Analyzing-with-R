for (row in row.names(dataset)) {
if (col != "Xây dựng") {
# Tạo dữ liệu
data <- data.frame(
year <- colnames(dataset),
qtr <- c("Q1", "Q2", "Q3"),
industry <- row.names,
growth <- dataset[row, ]
)
# Vẽ biểu đồ đường
ggplot(data, aes(x=year, y=growth, color=industry)) +
geom_line() +
labs(title="Tăng trưởng theo từng ngành", x="Năm", y="Tăng trưởng (%)")
}
}
library(ggplot2)
for (row in row.names(dataset)) {
if (col != "Xây dựng") {
# Tạo dữ liệu
data <- data.frame(
year <- colnames(dataset),
qtr <- c("Q1", "Q2", "Q3"),
industry <- row.names,
growth <- dataset[row, ]
)
# Vẽ biểu đồ đường
ggplot(data, aes(x=year, y=growth, color=industry)) +
geom_line() +
labs(title="Tăng trưởng theo từng ngành", x="Năm", y="Tăng trưởng (%)")
}
}
library(ggplot2)
for (col in colnames(dataset)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
na_count<-colSums(sapply(diabetes,is.na))
na_count
diabetes_median <- diabetes %>%
mutate_all(~ ifelse(is.na(.), median(., na.rm = TRUE), .))
diabetes_z <- (diabetes - colMeans(diabetes)) / apply(diabetes, 2, sd)
diabetes_z
melted_diabetes <- gather(diabetes_z, key = "Variable", value = "Z-score")
# Vẽ scatter plot cho tất cả các cột
ggplot(melted_diabetes, aes(x = Variable, y = `Z-score`, color = `Z-score`)) +
geom_point() +
labs(x = "Variable", y = "Z-score", title = "Scatter Plots of Z-scores") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Điều chỉnh góc và vị trí của chú thích trên trục x
# Lọc các giá trị Z-score mà tất cả đều nhỏ hơn 360
diabetes_filter <- diabetes[rowSums(apply(diabetes_z, 2, function(x) abs(x) < 700)) == ncol(diabetes_z), ]
# Hiển thị kích thước của bộ dữ liệu sau khi loại bỏ
cat("Còn lại số lượng hàng và cột là:", dim(diabetes_filter))
attach(diabetes)
par(mfrow=c(2,4))
boxplot(Pregnancies~Outcome, main="No. of Pregnancies vs. Diabetes",
xlab="Outcome", ylab="Pregnancies",col="red")
boxplot(Glucose~Outcome, main="Glucose vs. Diabetes",
xlab="Outcome", ylab="Glucose",col="pink")
boxplot(BloodPressure~Outcome, main="Blood Pressure vs. Diabetes",
xlab="Outcome", ylab="Blood Pressure",col="green")
boxplot(SkinThickness~Outcome, main="Skin Thickness vs. Diabetes",
xlab="Outcome", ylab="Skin Thickness",col="orange")
boxplot(Insulin~Outcome, main="Insulin vs. Diabetes",
xlab="Outcome", ylab="Insulin",col="yellow")
boxplot(BMI~Outcome, main="BMI vs. Diabetes",
xlab="Outcome", ylab="BMI",col="purple")
boxplot(DiabetesPedigreeFunction~Outcome, main="Diabetes Pedigree Function vs. Diabetes", xlab="Outcome", ylab="DiabetesPedigreeFunction",col="lightgreen")
boxplot(Age~Outcome, main="Age vs. Diabetes",
xlab="Outcome", ylab="Age",col="lightblue")
box(which = "outer", lty = "solid")
diabetes_filter$BMI_Category <- cut(diabetes_filter$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
ggplot(diabetes_filter, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
diabetes_filter$BMI_Category<- as.factor(diabetes_filter$BMI_Category)
str(diabetes_filter)
num_diabetes <- diabetes_filter
num_diabetes$BMI_Category <- cut(num_diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c(0, 1, 2, 3))
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(num_diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
set.seed(123)
samp <- sample(nrow(diabetes_filter), 0.8 * nrow(diabetes_filter))
train <- diabetes_filter[samp, ]
test <- diabetes_filter[-samp, ]
dim(test)
library(randomForest)
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 1000, mtry = 3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
set.seed(123)
samp <- sample(nrow(diabetes_filter), 0.75 * nrow(diabetes_filter))
train <- diabetes_filter[samp, ]
test <- diabetes_filter[-samp, ]
dim(test)
library(randomForest)
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
# Vẽ biểu đồ histogram
ggplot(diabetes, aes(x = BMI)) +
geom_histogram(binwidth = 2, fill = "lightblue", color = "black") +
labs(x = "BMI", title = "Histogram of BMI") + theme_minimal()
# summary statistics
kable(summary(select(diabetes, BMI)), format = "markdown")
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 5, mtry = 3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
sum(prediction==train$BMI_Category) / nrow(test) # The output is as shown below
sum(prediction==train$BMI_Category) / nrow(train) # The output is as shown below
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
library(readr)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
diabetes
str(diabetes)
diabetes$BMI_Category <- cut(diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
ggplot(diabetes, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
diabetes$BMI_Category<- as.factor(diabetes$BMI_Category)
str(diabetes)
num_diabetes <- diabetes
num_diabetes$BMI_Category <- cut(num_diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c(0, 1, 2, 3))
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(num_diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
dim(test)
library(randomForest)
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 5, mtry = 3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
install.packages(caret)
install.packages('caret')
renv::activate()
install.packages('caret')
library(caret)
# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(1234)
train_index <- createDataPartition(data$y, p = 0.7, list = FALSE)
# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(1234)
train_index <- createDataPartition(diabetes$BMI_Category, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Huấn luyện mô hình Random Forest
model <- train(y ~ ., data = train_data, method = "rf", trControl = trainControl(
method = "cv",
number = 10,
scoring = "accuracy"))
# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(1234)
train_index <- createDataPartition(diabetes$BMI_Category, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Huấn luyện mô hình Random Forest
model <- train(BMI_Category ~ ., data = train_data, method = "rf", trControl = trainControl(
method = "cv",
number = 10,
scoring = "accuracy"))
# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(1234)
train_index <- createDataPartition(diabetes$BMI_Category, p = 0.8, list = FALSE)
train_data <- diabetes[train_index, ]
test_data <- diabetes[-train_index, ]
# Huấn luyện mô hình Random Forest
model <- train(BMI_Category ~ ., data = train_data, method = "rf", trControl = trainControl(
method = "cv",
number = 10,
scoring = "accuracy"))
# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(1234)
train_index <- createDataPartition(diabetes$BMI_Category, p = 0.8, list = FALSE)
train_data <- diabetes[train_index, ]
test_data <- diabetes[-train_index, ]
# Huấn luyện mô hình Random Forest
model <- train(BMI_Category ~ ., data = train_data, method = "rf", trControl = trainControl(
method = "cv",
number = 10))
# Đánh giá mô hình trên tập kiểm tra
pred <- predict(model, test_data)
confusionMatrix(pred, test_data)
# Đánh giá mô hình trên tập kiểm tra
pred <- predict(model, test_data)
confusionMatrix(pred, test_data$BMI_Category)
# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(1234)
train_index <- createDataPartition(diabetes$BMI_Category, p = 0.8, list = FALSE)
train_data <- diabetes[train_index, ]
test_data <- diabetes[-train_index, ]
# Huấn luyện mô hình Random Forest
model <- train(BMI_Category ~ ., data = train_data, method = "rf", trControl = trainControl(
method = "cv",
number = 5))
# Đánh giá mô hình trên tập kiểm tra
pred <- predict(model, test_data)
confusionMatrix(pred, test_data$BMI_Category)
# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(1234)
train_index <- createDataPartition(diabetes$BMI_Category, p = 0.7, list = FALSE)
train_data <- diabetes[train_index, ]
test_data <- diabetes[-train_index, ]
# Huấn luyện mô hình Random Forest
model <- train(BMI_Category ~ ., data = train_data, method = "rf", trControl = trainControl(
method = "cv",
number = 5))
# Đánh giá mô hình trên tập kiểm tra
pred <- predict(model, test_data)
confusionMatrix(pred, test_data$BMI_Category)
# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(1234)
train_index <- createDataPartition(diabetes$BMI_Category, p = 0.7, list = FALSE)
train_data <- diabetes[train_index, ]
test_data <- diabetes[-train_index, ]
# Huấn luyện mô hình Random Forest
model <- train(BMI_Category ~ ., data = train_data, method = "rf", trControl = trainControl(
method = "cv",
number = 5))
confusionMatrix(pred, train_data$BMI_Category)
# Đánh giá mô hình trên tập kiểm tra
pred <- predict(model, test_data)
confusionMatrix(pred, test_data$BMI_Category)
confusionMatrix(pred, train_data$BMI_Category)
# Đánh giá mô hình trên tập kiểm tra
pred <- predict(model, test_data)
confusionMatrix(pred, test_data$BMI_Category)
# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(1234)
train_index <- createDataPartition(diabetes$BMI_Category, p = 0.7, list = FALSE)
train_data <- diabetes[train_index, ]
test_data <- diabetes[-train_index, ]
# Huấn luyện mô hình Random Forest
model <- train(BMI_Category ~ ., data = train_data, method = "rf", trControl = trainControl(
method = "cv",
number = 5))
# Đánh giá mô hình trên tập kiểm tra
pred <- predict(model, test_data)
confusionMatrix(pred, test_data$BMI_Category)
# Feature Scaling
train[-3] = scale(train[-1])
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
library(readr)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
diabetes
str(diabetes)
diabetes$BMI_Category <- cut(diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
ggplot(diabetes, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
diabetes$BMI_Category<- as.factor(diabetes$BMI_Category)
str(diabetes)
num_diabetes <- diabetes
num_diabetes$BMI_Category <- cut(num_diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c(0, 1, 2, 3))
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(num_diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
# Feature Scaling
train[-3] = scale(train[-1])
# Feature Scaling
train[-3] = scale(train[-2])
# Feature Scaling
train[-2] = scale(train[-2])
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
train
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
train[-2]
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
train[-9]
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
train[,-"BMI_Category"]
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
train[,0:8]
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
train[,1:8]
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
train[,1:9]
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
train[,1:8]
# Feature Scaling
train[, 1:8] = scale(train[, 1:8])
test[, 1:8] = scale(test[, 1:8])
# Feature Scaling
train[, 1:8] = scale(train[, 1:8])
test[, 1:8] = scale(test[, 1:8])
train
test
install.packages('e1071')
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = BMI_Category ~ .,
data = train,
type = 'C-classification',
kernel = 'linear')
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = BMI_Category ~ .,
data = train,
type = 'C-classification',
kernel = 'linear')
classifier
# Predicting the Test set results
pred = predict(classifier, newdata = test_set[-3])
# Predicting the Test set results
pred = predict(classifier, newdata = test[, 1:8])
# Predicting the Test set results
pred = predict(classifier, newdata = test[, 1:9])
pred
# Making the Confusion Matrix
cm = table(test[, 9], pred)
# Making the Confusion Matrix
cm = table(test[, 8:9], pred)
# Making the Confusion Matrix
cm = table(test[, 9:10], pred)
# Making the Confusion Matrix
cm = table(test[, 9:11], pred)
# Making the Confusion Matrix
cm = table(test[, 3], pred)
# Predicting the Test set results
pred = predict(classifier, newdata = test[, 1:9])
table(prediction, test$BMI_Category)
pred
results<-cbind(prediction,test$BMI_Category)
results
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
View(results)
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = BMI_Category ~ . -Outcome, data = train, type = 'C-classification', kernel = 'linear')
classifier
# Predicting the Test set results
pred = predict(classifier, newdata = test[, 1:9])
table(prediction, test$BMI_Category)
pred
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
# Feature Scaling
train[, 1:8] = scale(train[, 1:8])
test[, 1:8] = scale(test[, 1:8])
train[, 1:8]
# Feature Scaling
train[, 1:8] = scale(train[, 1:8])
test[, 1:8] = scale(test[, 1:8])
train[, 1:9]
# Feature Scaling
train[, 1:8] = scale(train[, 1:8])
test[, 1:8] = scale(test[, 1:8])
train[, 1:8]
# Predicting the Test set results
pred = predict(classifier, newdata = test[, 1:8])
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = BMI_Category ~ . -Outcome, data = train, type = 'C-classification', kernel = 'linear')
classifier
# Predicting the Test set results
pred = predict(classifier, newdata = test[, 1:8])
# Feature Scaling
train[, 1:8] = scale(train[, 1:8])
test[, 1:8] = scale(test[, 1:8])
test[, 1:8]
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = BMI_Category ~ . - Outcome, data = train, type = 'C-classification', kernel = 'linear')
classifier
# Predicting the Test set results
pred = predict(classifier, newdata = test[, 1:8])
model_diabetes <- diabetes[, -9]
model_diabetes
set.seed(123)
model_diabetes <- diabetes[, -9]
samp <- sample(nrow(model_diabetes), 0.8 * nrow(model_diabetes))
train <- model_diabetes[samp, ]
test <- model_diabetes[-samp, ]
# Feature Scaling
train[, 1:8] = scale(train[, 1:8])
test[, 1:8] = scale(test[, 1:8])
test[, 1:8]
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = BMI_Category ~ . - Outcome, data = train, type = 'C-classification', kernel = 'linear')
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = BMI_Category ~ ., data = train, type = 'C-classification', kernel = 'linear')
classifier
# Predicting the Test set results
pred = predict(classifier, newdata = test[, 1:8])
table(prediction, test$BMI_Category)
pred
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
