accuracy
accuracy <- function() {
predictions <- predict(model, newdata = dfTest, type = "class")
# So sánh giữa giá trị dự đoán và giá trị thực tế
confusion_matrix <- table(predictions, dfTest$Outcome)
print(confusion_matrix)
# Tính toán độ chính xác từ ma trận nhầm lẫn
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(accuracy)
}
model <- rpart(Outcome ~ Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy
accuracy <- function() {
predictions <- predict(model, newdata = dfTest, type = "class")
# So sánh giữa giá trị dự đoán và giá trị thực tế
confusion_matrix <- table(predictions, dfTest$Outcome)
print(confusion_matrix)
# Tính toán độ chính xác từ ma trận nhầm lẫn
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
return (accuracy)
}
model <- rpart(Outcome ~ Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy
model <- rpart(Outcome ~ Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose +  + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + SkinThickness  + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose  + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure  + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~  Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose  + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
accuracy <- function() {
predictions <- predict(model, newdata = dfTrain, type = "class")
# So sánh giữa giá trị dự đoán và giá trị thực tế
confusion_matrix <- table(predictions, dfTest$Outcome)
print(confusion_matrix)
# Tính toán độ chính xác từ ma trận nhầm lẫn
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
return (accuracy)
}
model <- rpart(Outcome ~ Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
accuracy <- function() {
predictions <- predict(model, newdata = dfTest, type = "class")
# So sánh giữa giá trị dự đoán và giá trị thực tế
confusion_matrix <- table(predictions, dfTest$Outcome)
print(confusion_matrix)
# Tính toán độ chính xác từ ma trận nhầm lẫn
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
return (accuracy)
}
model <- rpart(Outcome ~ Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI  + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~  BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
# Load the necessary library
install.packages("vip")
library(vip)
# Create a variable importance plot
var_importance <- vip::vip(tree_fit, num_features = 10)
# Load the necessary library
library(vip)
# Create a variable importance plot
var_importance <- vip::vip(model, num_features = 10)
print(var_importance)
# Huấn luyện mô hình cây quyết định
library(rpart)
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
# In cây quyết định
print(model)
# Biểu đồ cây quyết định
library(rpart.plot)
rpart.plot(model)
# Load the necessary library
library(vip)
# Create a variable importance plot
var_importance <- vip::vip(model, num_features = 10)
print(var_importance)
model <- rpart(Outcome ~ Pregnancies + Glucose + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose  + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
model
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
rpart.plot(model)
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
rpart.plot(model)
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose  + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
rpart.plot(model)
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
rpart.plot(model)
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
rpart.plot(model)
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
rpart.plot(model)
accuracy()
rules <- rpart.rules(model$fit)
rules <- rpart.rules(model)
print(rules)
# Make predictions on the testing data
model_performance <- function() {
predictions <- model %>%
predict(dfTest) %>%
pull(.pred)
# Tính giá trị RMSE (Root Mean Squared Error) - Lỗi bình phương trung bình gốc và R-squared - R2
metrics <- metric_set(rmse, rsq)
model_performance <- dfTest %>%
mutate(predictions = predictions) %>%
metrics(truth = medv, estimate = predictions)
print(model_performance)
}
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model_performance()
# Make predictions on the testing data
model_performance <- function() {
predictions <- model %>%
predict(dfTest) %>%
pull(.pred)
# Tính giá trị RMSE (Root Mean Squared Error) - Lỗi bình phương trung bình gốc và R-squared - R2
metrics <- metric_set(rmse, rsq)
model_performance <- dfTest %>%
mutate(predictions = predictions) %>%
metrics(truth = medv, estimate = predictions)
return (model_performance)
}
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model_performance()
# Make predictions on the testing data
model_performance <- function() {
predictions <- model %>%
predict(dfTest) %>%
pull(.Outcome)
# Tính giá trị RMSE (Root Mean Squared Error) - Lỗi bình phương trung bình gốc và R-squared - R2
metrics <- metric_set(rmse, rsq)
model_performance <- dfTest %>%
mutate(predictions = predictions) %>%
metrics(truth = medv, estimate = predictions)
return (model_performance)
}
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model_performance()
# Make predictions on the testing data
model_performance <- function() {
predictions <- model %>%
predict(dfTest) %>%
pull(Outcome)
# Tính giá trị RMSE (Root Mean Squared Error) - Lỗi bình phương trung bình gốc và R-squared - R2
metrics <- metric_set(rmse, rsq)
model_performance <- dfTest %>%
mutate(predictions = predictions) %>%
metrics(truth = medv, estimate = predictions)
return (model_performance)
}
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model_performance()
# Make predictions on the testing data
model_performance <- function() {
predictions <- predict(model, newdata = dfTest)
# Tính giá trị RMSE (Root Mean Squared Error) - Lỗi bình phương trung bình gốc và R-squared - R2
metrics <- metric_set(rmse, rsq)
model_performance <- dfTest %>%
mutate(predictions = predictions) %>%
metrics(truth = medv, estimate = predictions)
return (model_performance)
}
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model_performance()
library(yardstick) # Cần tải gói yardstick
model_performance <- function(model, dfTest) {
# Dự đoán trên dữ liệu thử nghiệm
predictions <- predict(model, newdata = dfTest)
# Tính toán giá trị RMSE và R-squared
rmse_value <- rmse(dfTest$Outcome, predictions)
rsq_value <- rsq(dfTest$Outcome, predictions)
# Tạo dataframe chứa kết quả đánh giá hiệu suất
model_performance <- data.frame(RMSE = rmse_value, R_squared = rsq_value)
return(model_performance)
}
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model_performance()
library(yardstick) # Cần tải gói yardstick
model_performance <- function() {
# Dự đoán trên dữ liệu thử nghiệm
predictions <- predict(model, newdata = dfTest)
# Tính toán giá trị RMSE và R-squared
rmse_value <- rmse(dfTest$Outcome, predictions)
rsq_value <- rsq(dfTest$Outcome, predictions)
# Tạo dataframe chứa kết quả đánh giá hiệu suất
model_performance <- data.frame(RMSE = rmse_value, R_squared = rsq_value)
return(model_performance)
}
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model_performance()
# Đọc file CSV trực tiếp từ đường link
df <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
head(df)
colnames(df)
str(df)
library(yardstick)
model_performance <- function() {
# Dự đoán trên dữ liệu thử nghiệm
predictions <- predict(model, newdata = dfTest)
# Tính toán giá trị RMSE và R-squared
rmse_value <- rmse(dfTest$Outcome, predictions)
rsq_value <- rsq(dfTest$Outcome, predictions)
# Tạo dataframe chứa kết quả đánh giá hiệu suất
model_performance <- data.frame(RMSE = rmse_value, R_squared = rsq_value)
return(model_performance)
}
library(yardstick)
model_performance <- function() {
# Dự đoán trên dữ liệu thử nghiệm
predictions <- predict(model, newdata = dfTest)
# Tính toán giá trị RMSE và R-squared
rmse_value <- rmse(dfTest$Outcome, predictions)
rsq_value <- rsq(dfTest$Outcome, predictions)
# Tạo dataframe chứa kết quả đánh giá hiệu suất
model_performance <- data.frame(RMSE = rmse_value, R_squared = rsq_value)
return(model_performance)
}
library(yardstick)
model_performance <- function() {
# Dự đoán trên dữ liệu thử nghiệm
predictions <- predict(model, newdata = dfTest)
# Tính toán giá trị RMSE và R-squared
#rmse_value <- rmse(dfTest$Outcome, predictions)
#rsq_value <- rsq(dfTest$Outcome, predictions)
# Hàm tính RMSE (Root Mean Squared Error)
rmse <- function(actual, predicted) {
return(sqrt(mean((actual - predicted)^2)))
}
# Hàm tính R-squared
rsquared <- function(actual, predicted) {
ss_res <- sum((actual - predicted)^2)
ss_tot <- sum((actual - mean(actual))^2)
return(1 - (ss_res / ss_tot))
}
# Tạo dataframe chứa kết quả đánh giá hiệu suất
model_performance <- data.frame(RMSE = rmse, R_squared = rsquared)
return(model_performance)
}
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model_performance()
library(yardstick)
model_performance <- function(model, dfTest) {
# Dự đoán trên dữ liệu thử nghiệm
predictions <- predict(model, newdata = dfTest)
# Hàm tính RMSE (Root Mean Squared Error)
rmse <- function(actual, predicted) {
return(sqrt(mean((actual - predicted)^2)))
}
# Hàm tính R-squared
rsquared <- function(actual, predicted) {
ss_res <- sum((actual - predicted)^2)
ss_tot <- sum((actual - mean(actual))^2)
return(1 - (ss_res / ss_tot))
}
# Tính toán giá trị RMSE và R-squared
rmse_value <- rmse(dfTest$Outcome, predictions)
rsq_value <- rsquared(dfTest$Outcome, predictions)
# Tạo dataframe chứa kết quả đánh giá hiệu suất
model_performance <- data.frame(RMSE = rmse_value, R_squared = rsq_value)
return(model_performance)
}
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model_performance()
library(yardstick)
model_performance <- function() {
# Dự đoán trên dữ liệu thử nghiệm
predictions <- predict(model, newdata = dfTest)
# Hàm tính RMSE (Root Mean Squared Error)
rmse <- function(actual, predicted) {
return(sqrt(mean((actual - predicted)^2)))
}
# Hàm tính R-squared
rsquared <- function(actual, predicted) {
ss_res <- sum((actual - predicted)^2)
ss_tot <- sum((actual - mean(actual))^2)
return(1 - (ss_res / ss_tot))
}
# Tính toán giá trị RMSE và R-squared
rmse_value <- rmse(dfTest$Outcome, predictions)
rsq_value <- rsquared(dfTest$Outcome, predictions)
# Tạo dataframe chứa kết quả đánh giá hiệu suất
model_performance <- data.frame(RMSE = rmse_value, R_squared = rsq_value)
return(model_performance)
}
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model_performance()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
rpart.plot(model)
accuracy()
model_performance()
# Dùng ma trận nhầm lẫn
accuracy <- function() {
predictions <- predict(model, newdata = dfTest, type = "class")
# So sánh giữa giá trị dự đoán và giá trị thực tế
confusion_matrix <- table(predictions, dfTest$Outcome)
print(confusion_matrix)
# Tính toán độ chính xác từ ma trận nhầm lẫn
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
return (accuracy)
}
library(caret)
set.seed(1)
split <- createDataPartition(df$Outcome,p = 0.75,list = FALSE)
dfTrain <- df[split,]
dfTest <- df[-split,]
head(dfTrain)
head(dfTest)
# Dùng ma trận nhầm lẫn
accuracy <- function() {
predictions <- predict(model, newdata = dfTest, type = "class")
# So sánh giữa giá trị dự đoán và giá trị thực tế
confusion_matrix <- table(predictions, dfTest$Outcome)
print(confusion_matrix)
# Tính toán độ chính xác từ ma trận nhầm lẫn
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
return (accuracy)
}
# Tính entropy cho từng cột trong dfTrain
# Hàm tính entropy
calculate_entropy <- function(attribute_vector) {
total_count <- length(attribute_vector)
values <- table(attribute_vector)
probabilities <- values / total_count
entropy <- -sum(probabilities * log2(probabilities))
return(entropy)
}
calculate_entropy_for_columns <- function(data) {
entropy_values <- numeric()
for (col in names(data)) {
entropy <- calculate_entropy(data[[col]])
entropy_values <- c(entropy_values, entropy)
}
names(entropy_values) <- names(data)
return(entropy_values)
}
# Tính entropy cho các cột trong dfTrain
entropy_values <- calculate_entropy_for_columns(dfTrain)
entropy_values
# Huấn luyện mô hình cây quyết định
library(rpart)
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
# In cây quyết định
print(model)
# Biểu đồ cây quyết định
library(rpart.plot)
rpart.plot(model)
library(vip)
var_importance <- vip::vip(model, num_features = 10)
print(var_importance)
library(pdp)
library(ggplot2)
# Lặp qua từng cột trong dfTrain (loại bỏ cột mục tiêu)
for (col in names(dfTrain)[-ncol(dfTrain)]) {
# Tạo Partial Dependence Plot cho từng cột và lưu vào biến pdp_plot
pdp_plot <- partial(model, pred.var = col)
# Tạo biểu đồ Partial Dependence Plot và hiển thị
plot(pdp_plot, main = paste("Partial Dependence Plot for", col))
}
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
rpart.plot(model)
accuracy()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
rpart.plot(model)
accuracy()
rules <- rpart.rules(model)
print(rules)
thongso <- function() {
predictions <- predict(model, newdata = dfTest, type = "class")
confusion_matrix <- table(predictions, dfTest$Outcome)
TP <- confusion_matrix[2, 2]  # True Positive
TN <- confusion_matrix[1, 1]  # True Negative
FP <- confusion_matrix[1, 2]  # False Positive
FN <- confusion_matrix[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
}
# Huấn luyện mô hình cây quyết định
library(rpart)
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
# In cây quyết định
print(model)
# Biểu đồ cây quyết định
library(rpart.plot)
rpart.plot(model)
thongso()
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
thongso()
accuracy()
thongso()
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
rpart.plot(model)
accuracy()
thongso()
# Dùng ma trận nhầm lẫn
accuracy <- function() {
predictions <- predict(model, newdata = dfTest, type = "class")
# So sánh giữa giá trị dự đoán và giá trị thực tế
confusion_matrix <- table(predictions, dfTest$Outcome)
print(confusion_matrix)
# Tính toán độ chính xác từ ma trận nhầm lẫn
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
return (accuracy)
}
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
accuracy()
thongso()
rules <- rpart.rules(model)
print(rules)
rules <- rpart.rules(model)
print(rules)
