xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- dataset[10, 2:ncol(dataset)]
dich_vu <- dataset[11, 2:ncol(dataset)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
dataset <- read.csv('gdp_danh_nghia_theo_quy.csv', fileEncoding = "UTF-16LE", sep="\t");
dataset
# Tạo dữ liệu giả định
xay_dung <- dataset[10, 2:ncol(dataset)]
dich_vu <- dataset[11, 2:ncol(dataset)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
#Chuyển kiểu dữ liệu sang kiểu số
num_columns <- ncol(dataset)
for (i in 2:ncol(dataset)) {
for (j in 1:nrow(dataset)) {
df[j, i] <- as.numeric(gsub(",", "", dataset[j, i]))
}
}
for (i in 2:ncol(dataset)) {
dataset[, i] <- as.numeric(dataset[, i])
}
str(datasetf)
dataset <- read.csv('gdp_danh_nghia_theo_quy.csv', fileEncoding = "UTF-16LE", sep="\t");
dataset
#Chuyển kiểu dữ liệu sang kiểu số
num_columns <- ncol(dataset)
for (i in 2:ncol(dataset)) {
for (j in 1:nrow(dataset)) {
df[j, i] <- as.numeric(gsub(",", "", dataset[j, i]))
}
}
for (i in 2:ncol(dataset)) {
dataset[, i] <- as.numeric(dataset[, i])
}
str(dataset)
df <- read.csv('gdp_danh_nghia_theo_quy.csv', fileEncoding = "UTF-16LE", sep="\t");
df
#Chuyển kiểu dữ liệu sang kiểu số
num_columns <- ncol(df)
for (i in 2:ncol(df)) {
for (j in 1:nrow(df)) {
df[j, i] <- as.numeric(gsub(",", "", df[j, i]))
}
}
for (i in 2:ncol(df)) {
df[, i] <- as.numeric(df[, i])
}
str(df)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# In kết quả
print(result)
xay_dung <- df[10,2:ncol(df) ]
dich_vu <- df[11,2:ncol(df) ]
xay_dung <- df[10,2:ncol(df) ]
dich_vu <- df[11,2:ncol(df) ]
xay_dung <- df[10,2:ncol(df)]
dich_vu <- df[11,2:ncol(df) ]
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# In kết quả
print(result)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# In kết quả
print(result)
for (col in colnames(dataset)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
library("readr")
library("ggplot")
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
install.packages("readr")
install.packages("readr")
install.packages("ggplot")
install.packages("readr")
install.packages("ggplot")
library("readr")
library("ggplot")
library("readr")
library("ggplot2")
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
library("readr")
library("ggplot2")
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = df$X,
value = df[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = df$X,
value = df[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = df$X,
value = df[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
install.packages("readr")
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
diabetes_z <- (diabetes - colMeans(diabetes)) / apply(diabetes, 2, sd)
diabetes_z
melted_diabetes <- gather(diabetes_z, key = "Variable", value = "Z-score")
# Vẽ scatter plot cho tất cả các cột
ggplot(melted_diabetes, aes(x = Variable, y = `Z-score`, color = `Z-score`)) +
geom_point() +
labs(x = "Variable", y = "Z-score", title = "Scatter Plots of Z-scores") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Điều chỉnh góc và vị trí của chú thích trên trục x
# Lọc các giá trị Z-score mà tất cả đều nhỏ hơn 360
diabetes_filter <- diabetes[rowSums(apply(diabetes_z, 2, function(x) abs(x) < 700)) == ncol(diabetes_z), ]
# Hiển thị kích thước của bộ dữ liệu sau khi loại bỏ
cat("Còn lại số lượng hàng và cột là:", dim(diabetes_filter))
attach(diabetes_filter)
par(mfrow=c(2,4))
boxplot(Pregnancies~Outcome, main="No. of Pregnancies vs. Diabetes",
xlab="Outcome", ylab="Pregnancies",col="red")
boxplot(Glucose~Outcome, main="Glucose vs. Diabetes",
xlab="Outcome", ylab="Glucose",col="pink")
boxplot(BloodPressure~Outcome, main="Blood Pressure vs. Diabetes",
xlab="Outcome", ylab="Blood Pressure",col="green")
boxplot(SkinThickness~Outcome, main="Skin Thickness vs. Diabetes",
xlab="Outcome", ylab="Skin Thickness",col="orange")
boxplot(Insulin~Outcome, main="Insulin vs. Diabetes",
xlab="Outcome", ylab="Insulin",col="yellow")
boxplot(BMI~Outcome, main="BMI vs. Diabetes",
xlab="Outcome", ylab="BMI",col="purple")
boxplot(DiabetesPedigreeFunction~Outcome, main="Diabetes Pedigree Function vs. Diabetes", xlab="Outcome", ylab="DiabetesPedigreeFunction",col="lightgreen")
boxplot(Age~Outcome, main="Age vs. Diabetes",
xlab="Outcome", ylab="Age",col="lightblue")
box(which = "outer", lty = "solid")
diabetes_filter $BloodPressure <- NULL
diabetes_filter $SkinThickness <- NULL
min_max_scaler <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
diabetes_filter <- as.data.frame(lapply(diabetes_filter, min_max_scaler))
diabetes_filter
train <- diabetes_filter [1:530,]
test <- diabetes_filter [531:760,]
model <-glm(Outcome ~.,family=binomial(link='logit'),data=train)
summary(model)
anova(model, test="Chisq")
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
rowSums(apply(diabetes_z, 2, function(x) abs(x) < 700)) == ncol(diabetes_z)
[rowSums(apply(diabetes_z, 2, function(x) abs(x) < 700)) == ncol(diabetes_z), ]
rowSums(apply(diabetes_z, 2, function(x) abs(x) < 700)) == ncol(diabetes_z)
(apply(diabetes_z, 2, function(x) abs(x) < 700))
rowSums(apply(diabetes_z, 2, function(x) abs(x) < 700)) == ncol(diabetes_z)
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.6,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.7,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.6,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.4,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.7,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read.csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
na_count<-colSums(sapply(diabetes,is.na))
na_count
diabetes_z <- (diabetes - colMeans(diabetes)) / apply(diabetes, 2, sd)
diabetes_z
melted_diabetes <- gather(diabetes_z, key = "Variable", value = "Z-score")
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
melted_diabetes <- gather(diabetes_z, key = "Variable", value = "Z-score")
# Vẽ scatter plot cho tất cả các cột
ggplot(melted_diabetes, aes(x = Variable, y = `Z-score`, color = `Z-score`)) +
geom_point() +
labs(x = "Variable", y = "Z-score", title = "Scatter Plots of Z-scores") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Điều chỉnh góc và vị trí của chú thích trên trục x
# Lọc các giá trị Z-score mà tất cả đều nhỏ hơn 360
diabetes_filter <- diabetes[rowSums(apply(diabetes_z, 2, function(x) abs(x) < 700)) == ncol(diabetes_z), ]
# Hiển thị kích thước của bộ dữ liệu sau khi loại bỏ
cat("Còn lại số lượng hàng và cột là:", dim(diabetes_filter))
attach(diabetes_filter)
par(mfrow=c(2,4))
boxplot(Pregnancies~Outcome, main="No. of Pregnancies vs. Diabetes",
xlab="Outcome", ylab="Pregnancies",col="red")
boxplot(Glucose~Outcome, main="Glucose vs. Diabetes",
xlab="Outcome", ylab="Glucose",col="pink")
boxplot(BloodPressure~Outcome, main="Blood Pressure vs. Diabetes",
xlab="Outcome", ylab="Blood Pressure",col="green")
boxplot(SkinThickness~Outcome, main="Skin Thickness vs. Diabetes",
xlab="Outcome", ylab="Skin Thickness",col="orange")
boxplot(Insulin~Outcome, main="Insulin vs. Diabetes",
xlab="Outcome", ylab="Insulin",col="yellow")
boxplot(BMI~Outcome, main="BMI vs. Diabetes",
xlab="Outcome", ylab="BMI",col="purple")
boxplot(DiabetesPedigreeFunction~Outcome, main="Diabetes Pedigree Function vs. Diabetes", xlab="Outcome", ylab="DiabetesPedigreeFunction",col="lightgreen")
boxplot(Age~Outcome, main="Age vs. Diabetes",
xlab="Outcome", ylab="Age",col="lightblue")
box(which = "outer", lty = "solid")
diabetes_f<-diabetes_filter
diabetes_f $BloodPressure <- NULL
diabetes_f $SkinThickness <- NULL
min_max_scaler <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
diabetes_scale <- as.data.frame(lapply(diabetes_f, min_max_scaler))
diabetes_scale
train <- diabetes_scale [1:530,]
test <- diabetes_scale [531:760,]
model <-glm(Outcome ~.,family=binomial(link='logit'),data=train)
summary(model)
anova(model, test="Chisq")
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
