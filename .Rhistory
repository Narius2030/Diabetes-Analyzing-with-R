<<<<<<< HEAD
install.packages(c("googledrive", "readr"))
library(googledrive)
library(readr)
install.packages(c("googledrive", "readr"))
# Đường link chia sẻ của file CSV trên Google Drive
link<-"https://drive.google.com/file/d/15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh/view?usp=drive_link"
# Lấy ID của file từ đường link
file_id <- gsub(".*/([^/]+)/.*", "\\1", link)
# Xây dựng đường link thực tế cho Google Drive API
drive_link <- sprintf("https://drive.google.com/uc?id=%s", file_id)
diabetes<-read_csv(drive_link)
# Đường link chia sẻ của file CSV trên Google Drive
link<-"https://drive.google.com/file/d/15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh/view?usp=drive_link"
# Lấy ID của file từ đường link
file_id <- gsub(".*/([^/]+)/.*", "\\1", link)
# Xây dựng đường link thực tế cho Google Drive API
drive_link <- sprintf("https://drive.google.com/uc?id=%s", file_id)
diabetes<-read_csv(drive_link)
# Đường link chia sẻ của file CSV trên Google Drive
link <- "https://drive.google.com/file/d/15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh/view?usp=drive_link"
# Lấy ID của file từ đường link
file_id <- gsub(".*/([^/]+)/.*", "\\1", link)
# Xây dựng đường link thực tế cho Google Drive API
drive_link <- sprintf("https://drive.google.com/uc?id=%s", file_id)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv(drive_link)
library(googledrive)
library(readr)
library(googledrive)
library(readr)
# Đường link chia sẻ của file CSV trên Google Drive
link <- "https://drive.google.com/file/d/15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh/view?usp=drive_link"
# Lấy ID của file từ đường link
file_id <- gsub(".*/([^/]+)/.*", "\\1", link)
# Xây dựng đường link thực tế cho Google Drive API
drive_link <- sprintf("https://drive.google.com/uc?id=%s", file_id)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv(drive_link)
# Hiển thị dữ liệu
print(diabetes)
# Đường link chia sẻ của file CSV trên Google Drive
link <- "https://drive.google.com/file/d/15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh/view?usp=drive_link"
# Lấy ID của file từ đường link
file_id <- gsub(".*/([^/]+)/.*", "\\1", link)
print(file_id)
# Xây dựng đường link thực tế cho Google Drive API
drive_link <- sprintf("https://drive.google.com/uc?id=%s", file_id)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv(drive_link)
# Hiển thị dữ liệu
diabetes
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
spec(diabetes)
# Hiển thị dữ liệu
diabetes
install.packages("readr")
install.packages("readr")
library(readr)
library(readr)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
spec(diabetes)
# Hiển thị dữ liệu
diabetes
head(diabetes)
summary(diabetes)
str(diabetes)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
suppressMessages(spec(diabetes))
# Hiển thị dữ liệu
diabetes
str(diabetes)
str(diabetes)
colnames(diabetes)
# Định nghĩa hàm thống kê cho mỗi cột
summary_stats <- function(column) {
mean_value <- mean(column, na.rm = TRUE)
median_value <- median(column, na.rm = TRUE)
# Tính giá trị phổ biến (mode)
frequency_table <- table(column)
mode_value <- as.numeric(names(frequency_table)[which.max(frequency_table)])
# Tạo một list chứa các giá trị thống kê
result <- list(
Mean = mean_value,
Median = median_value,
Mode = mode_value
)
return(result)
}
# Sử dụng lapply để áp dụng hàm cho mỗi cột của dataframe
column_stats <- lapply(diabetes, summary_stats)
# In kết quả
print(column_stats)
na_count<-colSums(diabetes)
na_count<-colSums(diabetes,is.na)
na_count<-colSums(diabetes,is.na)
na_count<-colSums(sapply(diabetes,is.na))
na_count
library(readr)
library(dplyr)
library(readr)
library(dplyr)
library(readr)
library(dplyr)
diabetes_median<- diabetes %>%
na.aggregate(type = "median", na.rm = TRUE)
diabetes_median<- diabetes %>%
na.aggregate(type = "median", na.rm = TRUE)
diabetes_median<- diabetes %>%
na.aggregate(type = "median", na.rm = TRUE)
diabetes_median<- diabetes %>%
na.aggregate(type = "median", na.rm = TRUE)
install.packages(c("dplyr", "zoo"))
install.packages(c("dplyr", "zoo"))
library(readr)
library(dplyr)
library(zoo)
library(readr)
library(dplyr)
library(zoo)
diabetes_median <- diabetes %>%
na.aggregate(type = "median", na.rm = TRUE)
diabetes_median <- diabetes %>%
na.aggregate(type = "median", na.rm = TRUE)
diabetes_median
diabetes_median <- diabetes %>%
na.aggregate(type = "mean", na.rm = TRUE)
diabetes_median <- diabetes %>%
na.aggregate(type = "mean", na.rm = TRUE)
diabetes_mean <- diabetes %>%
mutate_all(~ ifelse(is.na(.), mean(., na.rm = TRUE), .))
diabetes_median <- diabetes %>%
mutate_all(~ ifelse(is.na(.), median(., na.rm = TRUE), .))
fill_mode <- function(x) {
mode_val <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_val
return(x)
}
diabetes_mode <- diabetes %>%
mutate_all(fill_mode)
fill_mode <- function(x) {
mode_val <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_val
return(x)
}
diabetes_mode <- diabetes %>%
mutate_all(fill_mode)
diabetes_mode
fill_mode <- function(x) {
mode_val <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_val
return(x)
}
diabetes_mode <- diabetes %>%
mutate_all(fill_mode)
x <- c("A", "B", "A", "C", "B", "A", "A", "C")
x
#> A B C
#> 4 2 2
fill_mode <- function(x) {
mode_val <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_val
return(x)
}
diabetes_mode <- diabetes %>%
mutate_all(fill_mode)
x <- c("A", "B", "A", "C", "B", "A", "A", "C")
table(x)
#> A B C
#> 4 2 2
fill_mode <- function(x) {
mode_val <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_val
return(x)
}
diabetes_mode <- diabetes %>%
mutate_all(fill_mode)
boxplot(diabetes,main="Boxplot of Data")
boxplot(diabetes,main="Boxplot of Data")
z_scores <- scale(data)
boxplot(diabetes,main="Boxplot of Data")
# Giả sử diabetes là dataframe của bạn
diabetes_z <- scale(diabetes)
boxplot(diabetes,main="Boxplot of Data")
# Giả sử diabetes là dataframe của bạn
diabetes_z <- scale(diabetes)
diabetes_z
diabetes_features <- diabetes %>%
select(-'Outcome')
diabetes_z <- scale(diabetes)
diabetes_z
diabetes_features <- diabetes %>%
select(-'Outcome')
diabetes_z <- scale(diabetes)
diabetes_z
diabetes_features <- diabetes %>%
select(-'Outcome')
diabetes_z <- scale(diabetes_features)
diabetes_z
# Vẽ biểu đồ heatmap của ma trận Z-score
heatmap(diabetes_z,
main = "Heatmap of Z-scores",
xlab = "Features",
ylab = "Observations",
col = colorRampPalette(c("blue", "white", "red"))(50))  # Chọn màu sắc
install.packages("readr")
install.packages(c("dplyr", "zoo"))
install.packages("pheatmap")
install.packages("readr")
library(readr)
library(dplyr)
library(zoo)
library(pheatmap)
library(readr)
library(dplyr)
library(zoo)
library(pheatmap)
library(readr)
library(dplyr)
library(zoo)
library(pheatmap)
install.packages("readr")
install.packages(c("dplyr", "zoo"))
install.packages("pheatmap")
library(readr)
library(dplyr)
library(zoo)
library(pheatmap)
library(readr)
library(dplyr)
library(zoo)
library(pheatmap)
library(readr)
library(dplyr)
library(zoo)
library(pheatmap)
=======
>>>>>>> 7d57cf5e6bd0c3336480b05f36c6c57ed5a9b02b
pheatmap(diabetes_z,
main = "Heatmap of Z-scores",
cluster_cols = FALSE,  # Không gom cột
cluster_rows = FALSE)  # Không gom hàng
# Vẽ scatter plot cho toàn bộ dataframe
pairs(diabetes_z, main = "Scatter Plot of Z-scores")
library(readr)
library(dplyr)
library(zoo)
library(ggplot2)
install.packages("readr")
install.packages(c("dplyr", "zoo"))
install.packages("ggplot2")
install.packages("readr")
install.packages(c("dplyr", "zoo"))
install.packages("ggplot2")
install.packages("readr")
install.packages(c("dplyr", "zoo"))
install.packages("ggplot2")
library(readr)
library(dplyr)
library(zoo)
library(ggplot2)
library(readr)
library(dplyr)
library(zoo)
library(ggplot2)
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
ggplot(df, aes(x = x, y = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
}
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
ggplot(df, aes(x = x, y = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
}
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
# Vẽ scatter plot bằng ggplot2 và sử dụng print để hiển thị
print(ggplot(df, aes(x = x, y = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
)
}
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
# Vẽ scatter plot bằng ggplot2 và sử dụng print để hiển thị
print(ggplot(df, aes(x = x, y = y, color = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
)
}
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
# Vẽ scatter plot bằng ggplot2 và sử dụng print để hiển thị
print(ggplot(df, aes(x = x, y = y, color = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
)
}
diabetes_features <- diabetes %>%
select(-'Outcome')
diabetes_z <- scale(diabetes_features)
diabetes_z
Z-score (z-score standardization) được tính bằng cách sử dụng công thức sau:
Z-score (z-score standardization) được tính bằng cách sử dụng công thức sau:
Z-score (z-score standardization) được tính bằng cách sử dụng công thức sau:
Z-score (z-score standardization) được tính bằng cách sử dụng công thức sau:
<<<<<<< HEAD
>>>>>>> 5a240992b1a8d4723c49ab54bb15d644c8a3bef0
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
install.packages("corrgram")
library(corrgram)
install.packages("caret")
library(caret)
# Đọc file CSV trực tiếp từ đường link
df <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
library(dplyr)
# Đọc file CSV trực tiếp từ đường link
df <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
library(dplyr)
library(readr)
install.packages("readr")
library(dplyr)
library(readr)
library(dplyr)
library(readr)
# Đọc file CSV trực tiếp từ đường link
df <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
head(df)
colnames(df)
str(df)
summary(df)
sapply (df, sd)
count_na <- function(df) {
col_na_count <- colSums(is.na(df))
return(col_na_count)
}
count_na(df)
library(ggplot2)
boxplot(df$Age,
col="#2E8B57",
main="Boxplot for Descriptive Analysis of Age")
# Tạo biểu đồ cột
outcome_counts <- table(df$Outcome)
barplot(outcome_counts, main = "Tỷ lệ bệnh tiểu đường", xlab = "Outcome", ylab = "Số lượng", col = c("green", "red"))
# Tạo chú thích
legend("topright", legend = c("Không có bệnh", "Có bệnh"), fill = c("green", "red"))
# Tính phần trăm
percentages <- round(prop.table(outcome_counts) * 100, 1)
# Tạo biểu đồ tròn
pie(outcome_counts, main = "Tỷ lệ bệnh tiểu đường", labels = paste(percentages, "%"), col = c("lightgreen", "lightcoral"))
# Tạo chú thích
legend("topright", legend = c("Không có bệnh", "Có bệnh"), fill = c("green", "red"))
library(corrgram)
corrgram(df)
library(caret)
set.seed(1)
split <- createDataPartition(df$Outcome,p = 0.75,list = FALSE)
dfTrain <- df[split,]
dfTest <- df[-split,]
head(dfTrain)
head(dfTrain)
head(dfTest)
# Xây dựng mô hình hồi quy logistic
model <- glm(Outcome ~ Glucose + BloodPressure + BMI + Insulin + DiabetesPedigreeFunction + Age, data = dfTrain, family = binomial)
summary(model)
# Dự đoán giá trị trên tập dữ liệu kiểm tra
predictions <- predict(model, newdata = dfTest, type = "response")
# Chuyển đổi dự đoán thành giá trị nhị phân (0/1) dựa trên ngưỡng cắt (ví dụ: 0.5)
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
# So sánh giữa giá trị dự đoán và giá trị thực tế
confusion_matrix <- table(predicted_classes, dfTest$Outcome)
print(confusion_matrix)
# Dự đoán giá trị trên tập dữ liệu kiểm tra
predictions <- predict(model, newdata = dfTest, type = "response")
# Chuyển đổi dự đoán thành giá trị nhị phân (0/1) dựa trên ngưỡng cắt (ví dụ: 0.5)
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
# So sánh giữa giá trị dự đoán và giá trị thực tế
confusion_matrix <- table(predicted_classes, dfTest$Outcome)
print(confusion_matrix)
# Tính toán độ chính xác từ ma trận nhầm lẫn
calculate_accuracy <- function(confusion_matrix) {
correct_predictions <- sum(diag(confusion_matrix))  # Tổng số dự đoán đúng
total_samples <- sum(confusion_matrix)  # Tổng số mẫu
accuracy <- correct_predictions / total_samples  # Tính toán độ chính xác
return(accuracy)
}
accuracy <- calculate_accuracy(confusion_matrix)
accuracy
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
# Huấn luyện mô hình cây quyết định
install.packages("rpart")
library(rpart)
# Huấn luyện mô hình cây quyết định
install.packages("rpart")
library(rpart)
# Huấn luyện mô hình cây quyết định
remove.packages("ipred")
install.packages("rpart")
install.packages("ipred")
library(rpart)
# Huấn luyện mô hình cây quyết định
install.packages("rpart.plot")
library(rpart)
# Huấn luyện mô hình cây quyết định
library(rpart)
# Huấn luyện mô hình cây quyết định
remove.packages("ipred")
library(rpart)
# Huấn luyện mô hình cây quyết định
install.packages("ipred")
library(rpart)
# Huấn luyện mô hình cây quyết định
library(rpart)
# Huấn luyện mô hình cây quyết định
# Gỡ cài đặt gói 'rpart.plot'
remove.packages("rpart.plot")
# Cài đặt lại gói 'rpart.plot'
install.packages("rpart.plot")
library(rpart)
# Huấn luyện mô hình cây quyết định
install.packages("rpart.plot")
library(rpart)
# Huấn luyện mô hình cây quyết định
remove.packages("rpart")
library(rpart)
model <- rpart(Outcome ~ ., data = dfTrain, method = "class")
# In cây quyết định
print(model)
# Biểu đồ cây quyết định
library(rpart.plot)
rpart.plot(model)
# Huấn luyện mô hình cây quyết định
library(rpart)
model <- rpart(Outcome ~ ., data = dfTrain, method = "class")
# In cây quyết định
print(model)
# Biểu đồ cây quyết định
library(rpart.plot)
rpart.plot(model)
predictions <- predict(model, newdata = dfTest, type = "class")
# So sánh giữa giá trị dự đoán và giá trị thực tế
confusion_matrix <- table(predictions, dfTest$Outcome)
print(confusion_matrix)
# Tính toán độ chính xác từ ma trận nhầm lẫn
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
accuracy
# Vẽ cây quyết định
rpart.plot(model)
# Lấy thông tin về cây quyết định
tree_info <- as.list(get_tree(model, 1, format = "list"))
# Huấn luyện mô hình cây quyết định
library(rpart)
model <- rpart(Outcome ~ ., data = dfTrain, method = "class")
# In cây quyết định
print(model)
# Biểu đồ cây quyết định
library(rpart.plot)
rpart.plot(model)
library(rpart)
library(rpart.plot)
# Vẽ cây quyết định
rpart.plot(model)
# Trích xuất thông tin về các nhánh và điểm chia
split_var <- model$splits$variable
library(rpart)
library(ggplot2)
library(dplyr)
# Trích xuất dự đoán từ cây quyết định
dfTrain$Predicted <- predict(model, type = "class")
# Tạo biểu đồ phân tán
ggplot(dfTrain, aes(x = Glucose, y = BloodPressure, color = Predicted)) +
geom_point() +
geom_raster(data = get_tree.rpart(model, k = 1), aes(x = x, y = y, fill = n, alpha = n),
interpolate = TRUE) +
scale_fill_gradient(low = "white", high = "blue") +
scale_alpha_continuous(range = c(0.5, 1)) +
theme_minimal()
predictions <- predict(model, newdata = dfTest, type = "class")
# So sánh giữa giá trị dự đoán và giá trị thực tế
confusion_matrix <- table(predictions, dfTest$Outcome)
print(confusion_matrix)
# Tính toán độ chính xác từ ma trận nhầm lẫn
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
accuracy
=======
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
setwd("D:/DaiHoc/nam3/R/PJCuoiKi")
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
diabetes_z <- (diabetes - colMeans(diabetes)) / apply(diabetes, 2, sd)
diabetes_z
melted_diabetes <- gather(diabetes_z, key = "Variable", value = "Z-score")
# Vẽ scatter plot cho tất cả các cột
ggplot(melted_diabetes, aes(x = Variable, y = `Z-score`, color = `Z-score`)) +
geom_point() +
labs(x = "Variable", y = "Z-score", title = "Scatter Plots of Z-scores") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Điều chỉnh góc và vị trí của chú thích trên trục x
# Lọc các giá trị Z-score mà tất cả đều nhỏ hơn 360
diabetes_filter <- diabetes[rowSums(apply(diabetes_z, 2, function(x) abs(x) < 700)) == ncol(diabetes_z), ]
# Hiển thị kích thước của bộ dữ liệu sau khi loại bỏ
cat("Còn lại số lượng hàng và cột là:", dim(diabetes_filter))
diabetes$BloodPressure <- NULL
diabetes$SkinThickness <- NULL
train <- diabetes[1:530,]
test <- diabetes[531:760,]
model <-glm(Outcome ~.,family=binomial(link='logit'),data=train)
summary(model)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
diabetes_z <- (diabetes - colMeans(diabetes)) / apply(diabetes, 2, sd)
diabetes_z
melted_diabetes <- gather(diabetes_z, key = "Variable", value = "Z-score")
# Vẽ scatter plot cho tất cả các cột
ggplot(melted_diabetes, aes(x = Variable, y = `Z-score`, color = `Z-score`)) +
geom_point() +
labs(x = "Variable", y = "Z-score", title = "Scatter Plots of Z-scores") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Điều chỉnh góc và vị trí của chú thích trên trục x
# Lọc các giá trị Z-score mà tất cả đều nhỏ hơn 360
diabetes_filter <- diabetes[rowSums(apply(diabetes_z, 2, function(x) abs(x) < 700)) == ncol(diabetes_z), ]
# Hiển thị kích thước của bộ dữ liệu sau khi loại bỏ
cat("Còn lại số lượng hàng và cột là:", dim(diabetes_filter))
diabetes$BloodPressure <- NULL
diabetes$SkinThickness <- NULL
train <- diabetes[1:530,]
test <- diabetes[531:760,]
model <-glm(Outcome ~.,family=binomial(link='logit'),data=train)
summary(model)
anova(model, test="Chisq")
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
misClasificError <- mean(fitted.results != test$Outcome)
print(paste('Accuracy',1-misClasificError))
TP <- conf_matrix[2, 2]  # True Positive
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy=(TP+TN)/(TP+TN+FP+FN)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy)
Sensitivity=TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity=TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity=TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
FN
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity=TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity=TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
TP
FN
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity=TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
TP
FN
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity<-TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
TP
FN
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity)
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/TN+FP
cat("Độ đặc hiệu",Specificity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
dataset <- read.csv('gdp_danh_nghia_theo_quy.csv', fileEncoding = "UTF-16LE", sep="\t");
dataset
# Xây dựng mô hình hồi quy
model <- lm(growth ~ stage, data = data.frame(growth = growth_xd, stage = 1:3))
columns_to_extract = ['Xây dựng', 'Dịch vụ']
columns_to_extract = ['Xây dựng', 'Dịch vụ']
columns_to_extract = ['Xây dựng', 'Dịch vụ']
columns_to_extract = ['Xây dựng', 'Dịch vụ']
columns_to_extract = ['Xây dựng', 'Dịch vụ']
columns_to_extract = ['Xây dựng', 'Dịch vụ']
xay_dung <- dataset[10, ]
dich_vu <- dataset[11, ]
xay_dung
xay_dung
dich_vu
df_combined <- rbind(xay_dung, dich_vu)
df_combined
t_test_result <- t.test(df_combined$`Mức tăng trưởng` ~ df_combined$Ngành)
xay_dung <- dataset[10,2:ncol(dataset) ]
dich_vu <- dataset[11,2:ncol(dataset) ]
xay_dung <- dataset[10,2:ncol(dataset) ]
dich_vu <- dataset[11,2:ncol(dataset) ]
xay_dung
t_test_result <- t.test(df_combined$`xay_dung` ~ df_combined$dich_vu)
t_test_result <- t.test(xay_dung ,dich_vu )
xay_dung <- dataset[10,2:ncol(dataset) ]
dich_vu <- dataset[11,2:ncol(dataset) ]
xay_dung <- dataset[10,2:ncol(dataset) ]
dich_vu <- dataset[11,2:ncol(dataset) ]
xay_dung <- dataset[10,2:ncol(dataset) ]
dich_vu <- dataset[11,2:ncol(dataset) ]
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- dataset[10, 2:ncol(dataset)]
dich_vu <- dataset[11, 2:ncol(dataset)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
dataset <- read.csv('gdp_danh_nghia_theo_quy.csv', fileEncoding = "UTF-16LE", sep="\t");
dataset
# Tạo dữ liệu giả định
xay_dung <- dataset[10, 2:ncol(dataset)]
dich_vu <- dataset[11, 2:ncol(dataset)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
#Chuyển kiểu dữ liệu sang kiểu số
num_columns <- ncol(dataset)
for (i in 2:ncol(dataset)) {
for (j in 1:nrow(dataset)) {
df[j, i] <- as.numeric(gsub(",", "", dataset[j, i]))
}
}
for (i in 2:ncol(dataset)) {
dataset[, i] <- as.numeric(dataset[, i])
}
str(datasetf)
dataset <- read.csv('gdp_danh_nghia_theo_quy.csv', fileEncoding = "UTF-16LE", sep="\t");
dataset
#Chuyển kiểu dữ liệu sang kiểu số
num_columns <- ncol(dataset)
for (i in 2:ncol(dataset)) {
for (j in 1:nrow(dataset)) {
df[j, i] <- as.numeric(gsub(",", "", dataset[j, i]))
}
}
for (i in 2:ncol(dataset)) {
dataset[, i] <- as.numeric(dataset[, i])
}
str(dataset)
df <- read.csv('gdp_danh_nghia_theo_quy.csv', fileEncoding = "UTF-16LE", sep="\t");
df
#Chuyển kiểu dữ liệu sang kiểu số
num_columns <- ncol(df)
for (i in 2:ncol(df)) {
for (j in 1:nrow(df)) {
df[j, i] <- as.numeric(gsub(",", "", df[j, i]))
}
}
for (i in 2:ncol(df)) {
df[, i] <- as.numeric(df[, i])
}
str(df)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# In kết quả
print(result)
xay_dung <- df[10,2:ncol(df) ]
dich_vu <- df[11,2:ncol(df) ]
xay_dung <- df[10,2:ncol(df) ]
dich_vu <- df[11,2:ncol(df) ]
xay_dung <- df[10,2:ncol(df)]
dich_vu <- df[11,2:ncol(df) ]
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# In kết quả
print(result)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# In kết quả
print(result)
for (col in colnames(dataset)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
library("readr")
library("ggplot")
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
install.packages("readr")
install.packages("readr")
install.packages("ggplot")
install.packages("readr")
install.packages("ggplot")
library("readr")
library("ggplot")
library("readr")
library("ggplot2")
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
library("readr")
library("ggplot2")
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = df$X,
value = df[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = df$X,
value = df[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = df$X,
value = df[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
install.packages("readr")
>>>>>>> 7d57cf5e6bd0c3336480b05f36c6c57ed5a9b02b
