pheatmap(diabetes_z,
main = "Heatmap of Z-scores",
cluster_cols = FALSE,  # Không gom cột
cluster_rows = FALSE)  # Không gom hàng
# Vẽ scatter plot cho toàn bộ dataframe
pairs(diabetes_z, main = "Scatter Plot of Z-scores")
library(readr)
library(dplyr)
library(zoo)
library(ggplot2)
install.packages("readr")
install.packages(c("dplyr", "zoo"))
install.packages("ggplot2")
install.packages("readr")
install.packages(c("dplyr", "zoo"))
install.packages("ggplot2")
install.packages("readr")
install.packages(c("dplyr", "zoo"))
install.packages("ggplot2")
library(readr)
library(dplyr)
library(zoo)
library(ggplot2)
library(readr)
library(dplyr)
library(zoo)
library(ggplot2)
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
ggplot(df, aes(x = x, y = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
}
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
ggplot(df, aes(x = x, y = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
}
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
# Vẽ scatter plot bằng ggplot2 và sử dụng print để hiển thị
print(ggplot(df, aes(x = x, y = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
)
}
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
# Vẽ scatter plot bằng ggplot2 và sử dụng print để hiển thị
print(ggplot(df, aes(x = x, y = y, color = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
)
}
# Duyệt qua từng cột trong dataframe
for (col in colnames(diabetes_z)) {
# Tạo dataframe từ cột đó
df <- data.frame(x = seq_along(diabetes_z[, col]), y = diabetes_z[, col])
# Vẽ scatter plot bằng ggplot2 và sử dụng print để hiển thị
print(ggplot(df, aes(x = x, y = y, color = y)) +
geom_point() +
labs(x = "Index", y = paste("Z-score ", col), title = paste("Scatter Plot of Z-scores -", col))
)
}
diabetes_features <- diabetes %>%
select(-'Outcome')
diabetes_z <- scale(diabetes_features)
diabetes_z
Z-score (z-score standardization) được tính bằng cách sử dụng công thức sau:
Z-score (z-score standardization) được tính bằng cách sử dụng công thức sau:
Z-score (z-score standardization) được tính bằng cách sử dụng công thức sau:
Z-score (z-score standardization) được tính bằng cách sử dụng công thức sau:
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
setwd("D:/DaiHoc/nam3/R/PJCuoiKi")
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
diabetes_z <- (diabetes - colMeans(diabetes)) / apply(diabetes, 2, sd)
diabetes_z
melted_diabetes <- gather(diabetes_z, key = "Variable", value = "Z-score")
# Vẽ scatter plot cho tất cả các cột
ggplot(melted_diabetes, aes(x = Variable, y = `Z-score`, color = `Z-score`)) +
geom_point() +
labs(x = "Variable", y = "Z-score", title = "Scatter Plots of Z-scores") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Điều chỉnh góc và vị trí của chú thích trên trục x
# Lọc các giá trị Z-score mà tất cả đều nhỏ hơn 360
diabetes_filter <- diabetes[rowSums(apply(diabetes_z, 2, function(x) abs(x) < 700)) == ncol(diabetes_z), ]
# Hiển thị kích thước của bộ dữ liệu sau khi loại bỏ
cat("Còn lại số lượng hàng và cột là:", dim(diabetes_filter))
diabetes$BloodPressure <- NULL
diabetes$SkinThickness <- NULL
train <- diabetes[1:530,]
test <- diabetes[531:760,]
model <-glm(Outcome ~.,family=binomial(link='logit'),data=train)
summary(model)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
diabetes_z <- (diabetes - colMeans(diabetes)) / apply(diabetes, 2, sd)
diabetes_z
melted_diabetes <- gather(diabetes_z, key = "Variable", value = "Z-score")
# Vẽ scatter plot cho tất cả các cột
ggplot(melted_diabetes, aes(x = Variable, y = `Z-score`, color = `Z-score`)) +
geom_point() +
labs(x = "Variable", y = "Z-score", title = "Scatter Plots of Z-scores") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Điều chỉnh góc và vị trí của chú thích trên trục x
# Lọc các giá trị Z-score mà tất cả đều nhỏ hơn 360
diabetes_filter <- diabetes[rowSums(apply(diabetes_z, 2, function(x) abs(x) < 700)) == ncol(diabetes_z), ]
# Hiển thị kích thước của bộ dữ liệu sau khi loại bỏ
cat("Còn lại số lượng hàng và cột là:", dim(diabetes_filter))
diabetes$BloodPressure <- NULL
diabetes$SkinThickness <- NULL
train <- diabetes[1:530,]
test <- diabetes[531:760,]
model <-glm(Outcome ~.,family=binomial(link='logit'),data=train)
summary(model)
anova(model, test="Chisq")
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
misClasificError <- mean(fitted.results != test$Outcome)
print(paste('Accuracy',1-misClasificError))
TP <- conf_matrix[2, 2]  # True Positive
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy=(TP+TN)/(TP+TN+FP+FN)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy)
Sensitivity=TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity=TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity=TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
FN
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity=TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity=TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
TP
FN
Accuracy=(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity=TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
TP
FN
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity<-TP/TP+FN
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
TP
FN
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity)
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/TN+FP
cat("Độ đặc hiệu",Specificity)
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
dataset <- read.csv('gdp_danh_nghia_theo_quy.csv', fileEncoding = "UTF-16LE", sep="\t");
dataset
# Xây dựng mô hình hồi quy
model <- lm(growth ~ stage, data = data.frame(growth = growth_xd, stage = 1:3))
columns_to_extract = ['Xây dựng', 'Dịch vụ']
columns_to_extract = ['Xây dựng', 'Dịch vụ']
columns_to_extract = ['Xây dựng', 'Dịch vụ']
columns_to_extract = ['Xây dựng', 'Dịch vụ']
columns_to_extract = ['Xây dựng', 'Dịch vụ']
columns_to_extract = ['Xây dựng', 'Dịch vụ']
xay_dung <- dataset[10, ]
dich_vu <- dataset[11, ]
xay_dung
xay_dung
dich_vu
df_combined <- rbind(xay_dung, dich_vu)
df_combined
t_test_result <- t.test(df_combined$`Mức tăng trưởng` ~ df_combined$Ngành)
xay_dung <- dataset[10,2:ncol(dataset) ]
dich_vu <- dataset[11,2:ncol(dataset) ]
xay_dung <- dataset[10,2:ncol(dataset) ]
dich_vu <- dataset[11,2:ncol(dataset) ]
xay_dung
t_test_result <- t.test(df_combined$`xay_dung` ~ df_combined$dich_vu)
t_test_result <- t.test(xay_dung ,dich_vu )
xay_dung <- dataset[10,2:ncol(dataset) ]
dich_vu <- dataset[11,2:ncol(dataset) ]
xay_dung <- dataset[10,2:ncol(dataset) ]
dich_vu <- dataset[11,2:ncol(dataset) ]
xay_dung <- dataset[10,2:ncol(dataset) ]
dich_vu <- dataset[11,2:ncol(dataset) ]
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# Tạo dữ liệu giả định
xay_dung <- dataset[10, 2:ncol(dataset)]
dich_vu <- dataset[11, 2:ncol(dataset)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
dataset <- read.csv('gdp_danh_nghia_theo_quy.csv', fileEncoding = "UTF-16LE", sep="\t");
dataset
# Tạo dữ liệu giả định
xay_dung <- dataset[10, 2:ncol(dataset)]
dich_vu <- dataset[11, 2:ncol(dataset)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
#Chuyển kiểu dữ liệu sang kiểu số
num_columns <- ncol(dataset)
for (i in 2:ncol(dataset)) {
for (j in 1:nrow(dataset)) {
df[j, i] <- as.numeric(gsub(",", "", dataset[j, i]))
}
}
for (i in 2:ncol(dataset)) {
dataset[, i] <- as.numeric(dataset[, i])
}
str(datasetf)
dataset <- read.csv('gdp_danh_nghia_theo_quy.csv', fileEncoding = "UTF-16LE", sep="\t");
dataset
#Chuyển kiểu dữ liệu sang kiểu số
num_columns <- ncol(dataset)
for (i in 2:ncol(dataset)) {
for (j in 1:nrow(dataset)) {
df[j, i] <- as.numeric(gsub(",", "", dataset[j, i]))
}
}
for (i in 2:ncol(dataset)) {
dataset[, i] <- as.numeric(dataset[, i])
}
str(dataset)
df <- read.csv('gdp_danh_nghia_theo_quy.csv', fileEncoding = "UTF-16LE", sep="\t");
df
#Chuyển kiểu dữ liệu sang kiểu số
num_columns <- ncol(df)
for (i in 2:ncol(df)) {
for (j in 1:nrow(df)) {
df[j, i] <- as.numeric(gsub(",", "", df[j, i]))
}
}
for (i in 2:ncol(df)) {
df[, i] <- as.numeric(df[, i])
}
str(df)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# In kết quả
print(result)
xay_dung <- df[10,2:ncol(df) ]
dich_vu <- df[11,2:ncol(df) ]
xay_dung <- df[10,2:ncol(df) ]
dich_vu <- df[11,2:ncol(df) ]
xay_dung <- df[10,2:ncol(df)]
dich_vu <- df[11,2:ncol(df) ]
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# In kết quả
print(result)
# Tạo dữ liệu giả định
xay_dung <- df[10, 2:ncol(df)]
dich_vu <- df[11, 2:ncol(df)]
# Thực hiện kiểm định t-test
result <- t.test(xay_dung, dich_vu)
# In kết quả
print(result)
for (col in colnames(dataset)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
library("readr")
library("ggplot")
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
install.packages("readr")
install.packages("readr")
install.packages("ggplot")
install.packages("readr")
install.packages("ggplot")
library("readr")
library("ggplot")
library("readr")
library("ggplot2")
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
library("readr")
library("ggplot2")
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = dataset$X,
value = dataset[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = df$X,
value = df[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = df$X,
value = df[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
for (col in colnames(df)) {
# Tạo dataframe mới từ cột hiện tại
data <- data.frame(
group = df$X,
value = df[, col]
)
# Vẽ biểu đồ cột và ẩn nhãn trên trục x
print(ggplot(data, aes(x = group, y = value, fill = group)) +
geom_col(width = 1, color = "white") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank()) +
ggtitle(paste("Distribution of", col)))
}
install.packages("readr")
