plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
set.seed(12)
samp <- sample(nrow(diabetes_filter), 0.7 * nrow(diabetes_filter))
train <- diabetes_filter[samp, ]
test <- diabetes_filter[-samp, ]
#Kiểm tra kích thước của tập dữ liệu huấn luyện và kiểm tra
str(train)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
set.seed(123)
samp <- sample(nrow(diabetes_filter), 0.7 * nrow(diabetes_filter))
train <- diabetes_filter[samp, ]
test <- diabetes_filter[-samp, ]
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies -Outcome, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
set.seed(456)
samp <- sample(nrow(diabetes_filter), 0.7 * nrow(diabetes_filter))
train <- diabetes_filter[samp, ]
test <- diabetes_filter[-samp, ]
model <- randomForest(BMI_Category ~ . -Age -Pregnancies -Outcome, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
# Lặp lại quá trình huấn luyện và đánh giá trên các giá trị khác nhau của ntree
error_out_of_bag <- c()
for (ntree in 1:100) {
# Huấn luyện mô hình
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = ntree, mtry=3)
# Tính lỗi ra ngoài túi
error_out_of_bag[ntree] <- mean(predict(model, train) != train$BMI_Category)
}
# Vẽ đường cong lỗi
plot(error_out_of_bag, type = "l", col = "red", ylab = "OOB error", xlab="Số cây trong rừng")
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
#install.packages("randomForest")
library(randomForest)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
set.seed(456)
samp <- sample(nrow(diabetes_filter), 0.5 * nrow(diabetes_filter))
train <- diabetes_filter[samp, ]
test <- diabetes_filter[-samp, ]
#Kiểm tra kích thước của tập dữ liệu huấn luyện và kiểm tra
str(train)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
prediction_train <- predict(model, newdata = test)
table(prediction_train, train$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
accuracy_train
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
accuracy_train
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
accuracy_train
accuracy
accuracy_test <- mean(prediction == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train", accuracy_train)
paste("độ chính xác trên tập test", accuracy_test)
accuracy_test <- mean(prediction == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train: ", accuracy_train)
paste("độ chính xác trên tập test: ", accuracy_test)
library(ggplot2)
diabetes_filter$BMI_Category <- cut(diabetes_filter$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
ggplot(diabetes_filter, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
num_diabetes <- diabetes_filter
num_diabetes$BMI_Category <- cut(diabetes_filter$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c(0, 1, 2, 3))
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(num_diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
set.seed(456)
samp <- sample(nrow(diabetes_filter), 0.7 * nrow(diabetes_filter))
train <- diabetes_filter[samp, ]
test <- diabetes_filter[-samp, ]
library(randomForest)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=8)
model
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
accuracy_test <- mean(prediction_test == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train: ", accuracy_train)
paste("độ chính xác trên tập test: ", accuracy_test)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
accuracy_test <- mean(prediction_test == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train: ", accuracy_train)
paste("độ chính xác trên tập test: ", accuracy_test)
results<-cbind(prediction_test, test$BMI_Category)
head(results)
#Kiểm tra kích thước của tập dữ liệu huấn luyện và kiểm tra
str(train)
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(diabetes_filter),2)
set.seed(456)
samp <- sample(nrow(diabetes_filter), 0.7 * nrow(diabetes_filter))
train <- diabetes_filter[samp, ]
test <- diabetes_filter[-samp, ]
#Kiểm tra kích thước của tập dữ liệu huấn luyện và kiểm tra
str(train)
num_diabetes <- as.numeric(diabetes_filter)
num_diabetes <- diabetes_filter
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
num_diabetes
num_diabetes <- diabetes_filter
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
num_diabetes
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(num_diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
