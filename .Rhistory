metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
set.seed(456)
samp <- sample(nrow(diabetes_filter), 0.5 * nrow(diabetes_filter))
train <- diabetes_filter[samp, ]
test <- diabetes_filter[-samp, ]
#Kiểm tra kích thước của tập dữ liệu huấn luyện và kiểm tra
str(train)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy
prediction_train <- predict(model, newdata = test)
table(prediction_train, train$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
accuracy_train
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
accuracy_train
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
accuracy <- mean(prediction == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
accuracy_train
accuracy
accuracy_test <- mean(prediction == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train", accuracy_train)
paste("độ chính xác trên tập test", accuracy_test)
accuracy_test <- mean(prediction == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train: ", accuracy_train)
paste("độ chính xác trên tập test: ", accuracy_test)
library(ggplot2)
diabetes_filter$BMI_Category <- cut(diabetes_filter$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
ggplot(diabetes_filter, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
num_diabetes <- diabetes_filter
num_diabetes$BMI_Category <- cut(diabetes_filter$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c(0, 1, 2, 3))
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(num_diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
set.seed(456)
samp <- sample(nrow(diabetes_filter), 0.7 * nrow(diabetes_filter))
train <- diabetes_filter[samp, ]
test <- diabetes_filter[-samp, ]
library(randomForest)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=8)
model
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
accuracy_test <- mean(prediction_test == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train: ", accuracy_train)
paste("độ chính xác trên tập test: ", accuracy_test)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
accuracy_test <- mean(prediction_test == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train: ", accuracy_train)
paste("độ chính xác trên tập test: ", accuracy_test)
results<-cbind(prediction_test, test$BMI_Category)
head(results)
#Kiểm tra kích thước của tập dữ liệu huấn luyện và kiểm tra
str(train)
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(diabetes_filter),2)
set.seed(456)
samp <- sample(nrow(diabetes_filter), 0.7 * nrow(diabetes_filter))
train <- diabetes_filter[samp, ]
test <- diabetes_filter[-samp, ]
#Kiểm tra kích thước của tập dữ liệu huấn luyện và kiểm tra
str(train)
num_diabetes <- as.numeric(diabetes_filter)
num_diabetes <- diabetes_filter
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
num_diabetes
num_diabetes <- diabetes_filter
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
num_diabetes
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(num_diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
knitr::opts_chunk$set(echo = TRUE)
par(mfrow=c(2,2))
# Boxplot cho Age
boxplot(diabetes$Age,
col="#ff0066",
main="Boxplot for Age")
# Boxplot cho Pregnancies
boxplot(diabetes$Pregnancies,
col="yellow",
main="Boxplot for Pregnancy")
# Boxplot cho Pregnancies
boxplot(diabetes$Outcome,
col="blue",
main="Boxplot for Outcome")
plot(density(diabetes$Glucose),
col="yellow",
main="Density Plot for Glucose",
xlab="Glucose",
ylab="Density")
polygon(density(diabetes$Glucose),
col="#ccff66")
box(which = "outer", lty = "solid")
par(mfrow=c(1,4))
# Boxplot cho Age
boxplot(diabetes$Age,
col="#ff0066",
main="Boxplot for Age")
# Boxplot cho Pregnancies
boxplot(diabetes$Pregnancies,
col="yellow",
main="Boxplot for Pregnancy")
# Boxplot cho Pregnancies
boxplot(diabetes$Outcome,
col="blue",
main="Boxplot for Outcome")
plot(density(diabetes$Glucose),
col="yellow",
main="Density Plot for Glucose",
xlab="Glucose",
ylab="Density")
polygon(density(diabetes$Glucose),
col="#ccff66")
box(which = "outer", lty = "solid")
par(mfrow=c(1,4))
# Boxplot cho Age
boxplot(diabetes$Age,
col="#ff0066",
main="Boxplot for Age")
# Boxplot cho Pregnancies
boxplot(diabetes$Pregnancies,
col="yellow",
main="Boxplot for Pregnancy")
# Boxplot cho Pregnancies
barplot(table(data$Outcome), main = "Barplot of Out come", xlab = "Outcome")
par(mfrow=c(1,4))
# Boxplot cho Age
boxplot(diabetes$Age,
col="#ff0066",
main="Boxplot for Age")
# Boxplot cho Pregnancies
boxplot(diabetes$Pregnancies,
col="yellow",
main="Boxplot for Pregnancy")
# Boxplot cho Pregnancies
barplot(table(diabetes$Outcome), main = "Barplot of Out come", xlab = "Outcome")
plot(density(diabetes$Glucose),
col="yellow",
main="Density Plot for Glucose",
xlab="Glucose",
ylab="Density")
polygon(density(diabetes$Glucose),
col="#ccff66")
box(which = "outer", lty = "solid")
par(mfrow=c(1,2))
plot(diabetes$Insulin, diabetes$Glucose, xlab="Insulin", ylab="Glucose", type='p', col=c("red"), pch=20, main="Tương quan giữa Glucose và Insulin")
# Boxplot cho Outcome và Glucose theo người mắc bệnh và không
diabetes_groups <- cut(diabetes$Outcome, c(-Inf, 0, Inf), labels = c("Không bệnh", "Bệnh"))
boxplot(diabetes$Glucose~diabetes_groups, xlab="Outcome", ylab="Glucose (mg/dl)", main="Tỉ lệ giữa Glucose và Outcome", col="pink")
box(which="outer", lty="solid")
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read.csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
head(diabetes)
dim(diabetes)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read.csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
head(diabetes)
na_count<-colSums(sapply(diabetes,is.na))
na_count
diabetes_median <- diabetes %>%
mutate_all(~ ifelse(is.na(.), median(., na.rm = TRUE), .))
diabetes_z <- (diabetes - colMeans(diabetes)) / apply(diabetes, 2, sd)
head(diabetes_z)
melted_diabetes <- gather(diabetes_z, key = "Variable", value = "Z-score")
# Vẽ scatter plot cho tất cả các cột
ggplot(melted_diabetes, aes(x = Variable, y = `Z-score`, color = `Z-score`)) +
geom_point() +
labs(x = "Variable", y = "Z-score", title = "Scatter Plots of Z-scores") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Điều chỉnh góc và vị trí của chú thích trên trục x
# Lọc các giá trị Z-score mà tất cả đều nhỏ hơn 700
diabetes_filter <- diabetes[rowSums(apply(diabetes_z, 2, function(x) abs(x) < 700)) == ncol(diabetes_z), ]
# Hiển thị kích thước của bộ dữ liệu sau khi loại bỏ
cat("Còn lại số lượng hàng và cột là:", dim(diabetes_filter))
attach(diabetes_filter)
par(mfrow=c(2,4))
boxplot(Pregnancies~Outcome, main="No. of Pregnancies vs. Diabetes",
xlab="Outcome", ylab="Pregnancies",col="red")
boxplot(Glucose~Outcome, main="Glucose vs. Diabetes",
xlab="Outcome", ylab="Glucose",col="pink")
boxplot(BloodPressure~Outcome, main="Blood Pressure vs. Diabetes",
xlab="Outcome", ylab="Blood Pressure",col="green")
boxplot(SkinThickness~Outcome, main="Skin Thickness vs. Diabetes",
xlab="Outcome", ylab="Skin Thickness",col="orange")
boxplot(Insulin~Outcome, main="Insulin vs. Diabetes",
xlab="Outcome", ylab="Insulin",col="yellow")
boxplot(BMI~Outcome, main="BMI vs. Diabetes",
xlab="Outcome", ylab="BMI",col="purple")
boxplot(DiabetesPedigreeFunction~Outcome, main="Diabetes Pedigree Function vs. Diabetes", xlab="Outcome", ylab="DiabetesPedigreeFunction",col="lightgreen")
boxplot(Age~Outcome, main="Age vs. Diabetes",
xlab="Outcome", ylab="Age",col="lightblue")
box(which = "outer", lty = "solid")
diabetes_f<-diabetes_filter
num_diabetes <- diabetes_filter
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
