test[, 1:8]
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = BMI_Category ~ . - Outcome, data = train, type = 'C-classification', kernel = 'linear')
classifier
# Predicting the Test set results
pred = predict(classifier, newdata = test[, 1:8])
model_diabetes <- diabetes[, -9]
model_diabetes
set.seed(123)
model_diabetes <- diabetes[, -9]
samp <- sample(nrow(model_diabetes), 0.8 * nrow(model_diabetes))
train <- model_diabetes[samp, ]
test <- model_diabetes[-samp, ]
# Feature Scaling
train[, 1:8] = scale(train[, 1:8])
test[, 1:8] = scale(test[, 1:8])
test[, 1:8]
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = BMI_Category ~ . - Outcome, data = train, type = 'C-classification', kernel = 'linear')
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = BMI_Category ~ ., data = train, type = 'C-classification', kernel = 'linear')
classifier
# Predicting the Test set results
pred = predict(classifier, newdata = test[, 1:8])
table(prediction, test$BMI_Category)
pred
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
library(readr)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
str(diabetes)
diabetes$BMI_Category <- cut(diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
ggplot(diabetes, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
library(ggplot2)
diabetes$BMI_Category <- cut(diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
ggplot(diabetes, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
diabetes$BMI_Category<- as.factor(diabetes$BMI_Category)
str(diabetes)
num_diabetes <- diabetes
num_diabetes$BMI_Category <- cut(num_diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c(0, 1, 2, 3))
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
library(lattice)
renv::activate()
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(num_diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
dim(test)
library(randomForest)
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 5, mtry = 3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(1234)
train_index <- createDataPartition(diabetes$BMI_Category, p = 0.7, list = FALSE)
# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(123)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
# Huấn luyện mô hình Random Forest
model <- train(BMI_Category ~ ., data = train, method = "rf",metric = "Accuracy" ,trControl = trainControl(
method = "cv",
number = 5),
search = "grid")
library(caret)
# Huấn luyện mô hình Random Forest
model <- train(BMI_Category ~ ., data = train, method = "rf",metric = "Accuracy" ,trControl = trainControl(
method = "cv",
number = 5),
search = "grid")
# Đánh giá mô hình trên tập kiểm tra
pred <- predict(model, test)
confusionMatrix(pred, test$BMI_Category)
sum(pred==test$BMI_Category) / nrow(test)
# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
set.seed(1234)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
# Huấn luyện mô hình Random Forest
model <- train(BMI_Category ~ ., data = train, method = "rf",metric = "Accuracy" ,trControl = trainControl(
method = "cv",
number = 5),
search = "grid")
# Đánh giá mô hình trên tập kiểm tra
pred <- predict(model, test)
confusionMatrix(pred, test$BMI_Category)
sum(pred==test$BMI_Category) / nrow(test)
set.seed(1234)
samp <- sample(nrow(diabetes), 0.8 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
dim(test)
library(randomForest)
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 5, mtry = 3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
set.seed(1234)
samp <- sample(nrow(diabetes), 0.3 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
dim(test)
library(randomForest)
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 5, mtry = 3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 100, mtry = 64)
model
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 100, mtry = 4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 1000, mtry = 4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 900, mtry = 4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 800, mtry = 4)
model
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 800, mtry = 4)
model
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 800, mtry = 4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 1500, mtry = 4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 1500, mtry = 3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 1000, mtry = 3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
set.seed(1234)
samp <- sample(nrow(diabetes), 0.5 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
dim(test)
library(randomForest)
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 1000, mtry = 3)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 1000, mtry = 4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 100, mtry = 4)
model
prediction <- predict(model, newdata = test)
table(prediction, test$BMI_Category)
prediction
sum(prediction==test$BMI_Category) / nrow(test) # The output is as shown below
install.packages('tuneRF')
mtry <- tuneRF(diabetes[,-10], diabetes[,10], stepFactor=1.5)
mTry <- tuneRF(diabetes[,-10], diabetes[,10], stepFactor=1.5)
mTry <- tuneRF(train[,-10], train[,10], stepFactor=1.5)
mTry <- tuneRF(diabetes[,-10], diabetes[,10], stepFactor=1.5)
mTry <- tuneRF(diabetes[,-10], diabetes[,10], stepFactor=1)
mTry <- tuneRF(diabetes[,1:9], diabetes[,10], stepFactor=1)
mTry <- tuneRF(diabetes[,1:9], diabetes[,9], stepFactor=1)
mTry <- tuneRF(diabetes[,1:8], diabetes[,9], stepFactor=1)
mTry <- tuneRF(diabetes[,1:8], diabetes[,10], stepFactor=1)
diabetes$BMI_Category<- as.factor(diabetes$BMI_Category)
str(diabetes)
diabetes
mTry <- tuneRF(num_diabetes[,-10], num_diabetes[,10], stepFactor=1)
mTry <- tuneRF(num_diabetes[,-10], num_diabetes[,10], ntree=100, stepFactor=1)
tuneRF(
x = train[,-10],
y = train[,10],
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
set.seed(1234)
samp <- sample(nrow(diabetes), 0.5 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
dim(test)
library(randomForest)
tuneRF(
x = train[,-10],
y = train[,10],
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
tuneRF(
x = as.matrix(train[,-10]),
y = train[,10],
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
paste(dim(test), dim(train))
tuneRF(
x = train[,-9],
y = train[,9],
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
dim(train)
diabetes$BMI_Category<- as.factor(diabetes$BMI_Category)
str(diabetes)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
library(readr)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
str(diabetes)
library(ggplot2)
diabetes$BMI_Category <- cut(diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
ggplot(diabetes, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
diabetes$BMI_Category<- as.factor(diabetes$BMI_Category)
str(diabetes)
num_diabetes <- diabetes
num_diabetes$BMI_Category <- cut(num_diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c(0, 1, 2, 3))
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(num_diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
set.seed(1234)
samp <- sample(nrow(diabetes), 0.5 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
dim(train)
library(randomForest)
tuneRF(
x = train[,-10],
y = train[,10],
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 100, mtry = 4)
model
tuneRF(
x = train[,1:9],
y = train[,10],
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
tuneRF(
x = train[,1:9],
y = train[,10],
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
tuneRF(
x = train[,1:9],
y = train[,11],
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
diabetes
str(diabetes)
library(ggplot2)
diabetes$BMI_Category <- cut(diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
ggplot(diabetes, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
num_diabetes <- diabetes
num_diabetes$BMI_Category <- cut(num_diabetes$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c(0, 1, 2, 3))
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(num_diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
set.seed(1234)
samp <- sample(nrow(diabetes), 0.5 * nrow(diabetes))
train <- diabetes[samp, ]
test <- diabetes[-samp, ]
dim(train)
tuneRF(
x = train[,1:9],
y = train[,10],
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
tuneRF(
x = train[,1:8],
y = train[,10],
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
model <- randomForest(BMI_Category ~ . - Outcome, data = train, ntree = 100, mtry = 4)
model
tuneRF(
x = train[,1:9],
y = train[,10],
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
library(tuneRF)
install.packages('tuneRF')
rf_fit <- tuneRF(
x = train[,1:9],
y = train[,10],
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
rf_fit <- tuneRF(
x = train[,-10],
y = train[,10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
rf_fit <- tuneRF(
x = train[,-10],
y = train[,10],
metric = "OOBAcc",
ntreeTry = 384,
mtryStart = 4,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
rf_fit <- tuneRF(
x = train[,-10],
y = train[,10],
metric = "OOBAcc",
ntreeTry = 384,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
rf_fit <- tuneRF(
x = train[,-10],
y = train[,10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
rf_fit <- tuneRF(
x = train[,-10],
y = train[,10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
sum(is.na(train))
for (col in colnames(train)) {
print(sum(is.na(train[, col])))
}
X <- train[, -10]
Y <- train[, 10]
X
Y
X <- train[, 1:8]
Y <- train[, 10]
X
Y
rf_fit <- tuneRF(
x = X,
y = Y,
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE
)
rf_fit <- tuneRF(
x = X,
y = Y,
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = FALSE)
