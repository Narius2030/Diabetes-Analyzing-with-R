# Huấn luyện mô hình
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = ntree, mtry=3)
# Tạo tập oob
oob <- sample(nrow(train), 0.3 * nrow(train))
# Tính lỗi out_of_bag
error_out_of_bag[ntree] <- mean(predict(model, train[oob,]) != train[oob,]$BMI_Category)
}
# Vẽ đường cong lỗi
plot(error_out_of_bag, type = "l", col = "red", ylab = "OOB error", xlab="Số cây trong rừng")
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
accuracy_test <- mean(prediction_test == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train: ", accuracy_train)
paste("độ chính xác trên tập test: ", accuracy_test)
#model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model <- randomForest(BMI_Category ~ . + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction, data = train, ntree = 100, mtry=3)
library(randomForest)
#model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model <- randomForest(BMI_Category ~ . + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction, data = train, ntree = 100, mtry=3)
model
#model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model <- randomForest(BMI_Category ~ . + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Outcome, data = train, ntree = 100, mtry=3)
model
#model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model <- randomForest(BMI_Category ~ . +Glucose +BloodPressure +SkinThickness +Insulin +BMI +DiabetesPedigreeFunction +Outcome, data = train, ntree = 100, mtry=3)
model
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
accuracy_test <- mean(prediction_test == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train: ", accuracy_train)
paste("độ chính xác trên tập test: ", accuracy_test)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
#model <- randomForest(BMI_Category ~ . +Glucose +BloodPressure +SkinThickness +Insulin +BMI +DiabetesPedigreeFunction +Outcome, data = train, ntree = 100, mtry=3)
model
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
accuracy_test <- mean(prediction_test == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train: ", accuracy_train)
paste("độ chính xác trên tập test: ", accuracy_test)
#model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model <- randomForest(BMI_Category ~ +Glucose +BloodPressure +SkinThickness +Insulin +BMI +DiabetesPedigreeFunction +Outcome, data = train, ntree = 100, mtry=3)
model
#model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model <- randomForest(BMI_Category ~ Glucose +BloodPressure +SkinThickness +Insulin +BMI +DiabetesPedigreeFunction +Outcome, data = train, ntree = 100, mtry=3)
model
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
accuracy_test <- mean(prediction_test == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train: ", accuracy_train)
paste("độ chính xác trên tập test: ", accuracy_test)
prediction_test <- predict(model, newdata = test)
table(prediction_test, test)
prediction_test <- predict(model, newdata = test)
table(prediction_test, test$BMI_Category)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
prediction_test
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
knitr::opts_chunk$set(echo = TRUE)
library(reader)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read.csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
library(reader)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read_csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
library(reader)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read.csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
library(reader)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read.csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
library(reader)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read.csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
library(reader)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read.csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
head(diabetes)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
library(randomForest)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=4)
model
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
accuracy_test <- mean(prediction_test == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train: ", accuracy_train)
paste("độ chính xác trên tập test: ", accuracy_test)
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
accuracy_test <- mean(prediction_test == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train: ", accuracy_train)
paste("độ chính xác trên tập test: ", accuracy_test)
# creating correlation matrix
corr_mat <- round(cor(diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# Lặp lại quá trình huấn luyện và đánh giá trên các giá trị khác nhau của ntree
error_out_of_bag <- c()
for (ntree in 1:100) {
# Huấn luyện mô hình
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = ntree, mtry=3)
# Tạo tập oob
oob <- sample(nrow(train), 0.3 * nrow(train))
# Tính lỗi out_of_bag
error_out_of_bag[ntree] <- mean(predict(model, train[oob,]) != train[oob,]$BMI_Category)
}
# Vẽ đường cong lỗi
plot(error_out_of_bag, type = "l", col = "red", ylab = "OOB error", xlab="Số cây trong rừng")
knitr::opts_chunk$set(echo = TRUE)
library(reader)
# Đọc file CSV trực tiếp từ đường link
diabetes <- read.csv("https://drive.google.com/uc?id=15mjrv0LV2T6GWNdAuW-QhXVdtMkQALlh")
# Hiển thị dữ liệu
head(diabetes)
str(diabetes)
summary(diabetes)
#install.packages("cowplot")
#install.packages("gridExtra")
library(ggplot2)
library(cowplot)
library(gridExtra)
par(mfrow=c(1,4))
# Boxplot cho Age
boxplot(diabetes$Age,
col="#ff0066",
main="Boxplot for Age")
# Boxplot cho Pregnancies
boxplot(diabetes$Pregnancies,
col="yellow",
main="Boxplot for Pregnancy")
# Boxplot cho Pregnancies
barplot(table(diabetes$Outcome), main = "Barplot of Out come", xlab = "Outcome", ylab="Count")
plot(density(diabetes$Glucose),
col="yellow",
main="Density Plot for Glucose",
xlab="Glucose",
ylab="Density")
polygon(density(diabetes$Glucose),
col="#ccff66")
box(which = "outer", lty = "solid")
par(mfrow=c(1,2))
plot(diabetes$Insulin, diabetes$Glucose, xlab="Insulin", ylab="Glucose", type='p', col=c("red"), pch=20, main="Tương quan giữa Glucose và Insulin")
# Boxplot cho Outcome và Glucose theo người mắc bệnh và không
diabetes_groups <- cut(diabetes$Outcome, c(-Inf, 0, Inf), labels = c("Không bệnh", "Bệnh"))
boxplot(diabetes$Glucose~diabetes_groups, xlab="Outcome", ylab="Glucose (mg/dl)", main="Tỉ lệ giữa Glucose và Outcome", col="pink")
box(which="outer", lty="solid")
p1 <- ggplot(data = diabetes, aes(x = Glucose, y = Outcome)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Mối quan hệ giữa nồng độ glucose và kết quả bệnh tiểu đường",
x = "Nồng độ glucose (mg/dL)",
y = "Kết quả (1 = mắc bệnh, 0 = không mắc bệnh)")
p2 <- ggplot(data = diabetes, aes(x = SkinThickness, y = Outcome)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Mối quan hệ giữa độ dày của da và kết quả bệnh tiểu đường",
x = "độ dày da (mm)",
y = "Kết quả (1 = mắc bệnh, 0 = không mắc bệnh)")
p3 <- ggplot(data = diabetes, aes(x = Pregnancies, y = Outcome)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Mối quan hệ giữa số lần mang thai và kết quả bệnh tiểu đường",
x = "Số lần mang thai (lần)",
y = "Kết quả (1 = mắc bệnh, 0 = không mắc bệnh)")
grid.arrange(p1, p2, p3, ncol = 3)
sum_of_nan <- sum(is.na(diabetes))
paste("Tổng số giá trị rỗng trong dataset:", sum_of_nan)
for (col in colnames(diabetes)) {
nan_of_col <- sum(is.na(diabetes[, col]))
print(paste("Số giá trị rỗng trong cột", col, ":", nan_of_col))
}
find_outliers <- function(inp, na.rm = TRUE) {
i.qnt <- quantile(inp, probs = c(0.25, 0.75), na.rm = na.rm)
i.max <- 1.5 * IQR(inp, na.rm = na.rm)
outliers <- inp < (i.qnt[1] - i.max) | inp > (i.qnt[2] + i.max)
return(outliers)
}
calculate_rate <- function(inp) {
num_outliers <- sum(find_outliers(inp))
num_regular <- length(inp) - num_outliers
outlier_rate <- num_outliers / length(inp) * 100
regular_rate <- num_regular / length(inp) * 100
rates <- list(outlier=outlier_rate, regular=regular_rate)
return (rates)
}
for (col in colnames(diabetes)) {
rates <- calculate_rate(unlist(diabetes[, col]))
# Liệt kê tỉ lệ giá trị ngoại lại trong từng cột
print(paste(col, "-", "Total Outliers (%):", round(rates$outlier, 2), ", Regular Values (%):", round(rates$outlier, 2)))
}
pie_outlier <- function(outlier_col) {for (col in outlier_col) {
rates <- calculate_rate(unlist(diabetes[, col]))
pie_data <- data.frame(
type = c("Outliers", "Regular"),
rate = c(rates$outlier, rates$regular)
)
# Vẽ trực quan những cột có tỉ lệ ngoại lai >= 2.3%
return(ggplot(pie_data, aes(x="", y = rate, fill=type)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
labs(title = paste(col),
caption = paste0("Total Outliers (%):", round(rates$outlier, 2), ", Regular Values (%):", round(rates$regular, 2))))
}}
grid.arrange(pie_outlier("BloodPressure"), pie_outlier("Insulin"), pie_outlier("BMI"), pie_outlier("DiabetesPedigreeFunction"), ncol=2)
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
na_count<-colSums(sapply(diabetes,is.na))
na_count
diabetes_median <- diabetes %>%
mutate_all(~ ifelse(is.na(.), median(., na.rm = TRUE), .))
diabetes_z <- (diabetes - colMeans(diabetes)) / apply(diabetes, 2, sd)
head(diabetes_z)
melted_diabetes <- gather(diabetes_z, key = "Variable", value = "Z-score")
# Vẽ scatter plot cho tất cả các cột
ggplot(melted_diabetes, aes(x = Variable, y = `Z-score`, color = `Z-score`)) +
geom_point() +
labs(x = "Variable", y = "Z-score", title = "Scatter Plots of Z-scores") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Điều chỉnh góc và vị trí của chú thích trên trục x
# Lọc các giá trị Z-score mà tất cả đều nhỏ hơn 700
diabetes_filter <- diabetes[rowSums(apply(diabetes_z, 2, function(x) abs(x) < 700)) == ncol(diabetes_z), ]
# Hiển thị kích thước của bộ dữ liệu sau khi loại bỏ
cat("Còn lại số lượng hàng và cột là:", dim(diabetes_filter))
attach(diabetes_filter)
par(mfrow=c(2,4))
boxplot(Pregnancies~Outcome, main="No. of Pregnancies vs. Diabetes",
xlab="Outcome", ylab="Pregnancies",col="red")
boxplot(Glucose~Outcome, main="Glucose vs. Diabetes",
xlab="Outcome", ylab="Glucose",col="pink")
boxplot(BloodPressure~Outcome, main="Blood Pressure vs. Diabetes",
xlab="Outcome", ylab="Blood Pressure",col="green")
boxplot(SkinThickness~Outcome, main="Skin Thickness vs. Diabetes",
xlab="Outcome", ylab="Skin Thickness",col="orange")
boxplot(Insulin~Outcome, main="Insulin vs. Diabetes",
xlab="Outcome", ylab="Insulin",col="yellow")
boxplot(BMI~Outcome, main="BMI vs. Diabetes",
xlab="Outcome", ylab="BMI",col="purple")
boxplot(DiabetesPedigreeFunction~Outcome, main="Diabetes Pedigree Function vs. Diabetes", xlab="Outcome", ylab="DiabetesPedigreeFunction",col="lightgreen")
boxplot(Age~Outcome, main="Age vs. Diabetes",
xlab="Outcome", ylab="Age",col="lightblue")
box(which = "outer", lty = "solid")
diabetes_f<-diabetes_filter
diabetes_f $BloodPressure <- NULL
diabetes_f $SkinThickness <- NULL
dim(diabetes_f)
min_max_scaler <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
diabetes_scale <- as.data.frame(lapply(diabetes_f, min_max_scaler))
head(diabetes_scale)
train <- diabetes_scale [1:530,]
test <- diabetes_scale [531:760,]
model <-glm(Outcome ~.,family=binomial(link='logit'),data=train)
summary(model)
anova(model, test="Chisq")
fitted.results <- predict(model,newdata=test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
(conf_matrix_logi<-table(fitted.results, test$Outcome))
TP <- conf_matrix_logi[2, 2]  # True Positive
TN <- conf_matrix_logi[1, 1]  # True Negative
FP <- conf_matrix_logi[1, 2]  # False Positive
FN <- conf_matrix_logi[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
#install.packages("corrgram")
library(corrgram)
corrgram(diabetes_filter)
library(caret)
set.seed(1)
split <- createDataPartition(diabetes_filter$Outcome,p = 0.75,list = FALSE)
dfTrain <- diabetes_filter[split,]
dfTest <- diabetes_filter[-split,]
head(dfTrain)
head(dfTest)
# Dùng ma trận nhầm lẫn
accuracy <- function() {
predictions <- predict(model, newdata = dfTest, type = "class")
# So sánh giữa giá trị dự đoán và giá trị thực tế
confusion_matrix <- table(predictions, dfTest$Outcome)
print(confusion_matrix)
# Tính toán độ chính xác từ ma trận nhầm lẫn
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
return (accuracy)
}
thongso <- function() {
predictions <- predict(model, newdata = dfTest, type = "class")
confusion_matrix <- table(predictions, dfTest$Outcome)
TP <- confusion_matrix[2, 2]  # True Positive
TN <- confusion_matrix[1, 1]  # True Negative
FP <- confusion_matrix[1, 2]  # False Positive
FN <- confusion_matrix[2, 1]  # False Negative
Accuracy<-(TP+TN)/(TP+TN+FP+FN)
cat("Độ chính xác:",Accuracy,"\n")
#trong số bệnh nhân thực tế bị bệnh tiểu đường,bao nhiêu phần trăm được dự báo bị bệnh
Sensitivity<-TP/(TP+FN)
cat("Độ nhạy:",Sensitivity,"\n")
#trong số bệnh nhân thực tế không bị bệnh, bao nhiêu phần trăm được dự báo không bị bệnh
Specificity<-TN/(TN+FP)
cat("Độ đặc hiệu",Specificity)
}
# Huấn luyện mô hình cây quyết định
library(rpart)
model <- rpart(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
# In cây quyết định
print(model)
# Biểu đồ cây quyết định
library(rpart.plot)
rpart.plot(model)
thongso()
library(vip)
var_importance <- vip::vip(model, num_features = 10)
print(var_importance)
library(pdp)
library(ggplot2)
# Lặp qua từng cột trong dfTrain (loại bỏ cột mục tiêu)
for (col in names(dfTrain)[-ncol(dfTrain)]) {
# Tạo Partial Dependence Plot cho từng cột và lưu vào biến pdp_plot
pdp_plot <- partial(model, pred.var = col)
# Tạo biểu đồ Partial Dependence Plot và hiển thị
plot(pdp_plot, main = paste("Partial Dependence Plot for", col))
}
model <- rpart(Outcome ~ Glucose + BloodPressure + BMI + DiabetesPedigreeFunction + Age, data = dfTrain, method = "class")
rpart.plot(model)
accuracy()
thongso()
rules <- rpart.rules(model)
print(rules)
library(ggplot2)
diabetes_filter$BMI_Category <- cut(diabetes_filter$BMI,
breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
ggplot(diabetes_filter, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
num_diabetes <- diabetes_filter
num_diabetes$BMI_Category <- as.integer(num_diabetes$BMI_Category)
str(num_diabetes)
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(num_diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4)
set.seed(456)
samp <- sample(nrow(diabetes_filter), 0.7 * nrow(diabetes_filter))
train <- diabetes_filter[samp, ]
test <- diabetes_filter[-samp, ]
#Kiểm tra kích thước của tập dữ liệu huấn luyện và kiểm tra
str(train)
library(randomForest)
rf_fit <- tuneRF(
x = train[, 1:8],
y = train[, 10],
metric = "OOBAcc",
ntreeTry = 100,
mtryStart = 3,
stepFactor = 1.5,
improve = 0.01,
trace = T,
plot = T
)
# Lặp lại quá trình huấn luyện và đánh giá trên các giá trị khác nhau của ntree
error_out_of_bag <- c()
for (ntree in 1:100) {
# Huấn luyện mô hình
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = ntree, mtry=3)
# Tạo tập oob
oob <- sample(nrow(train), 0.3 * nrow(train))
# Tính lỗi out_of_bag
error_out_of_bag[ntree] <- mean(predict(model, train[oob,]) != train[oob,]$BMI_Category)
}
# Vẽ đường cong lỗi
plot(error_out_of_bag, type = "l", col = "red", ylab = "OOB error", xlab="Số cây trong rừng")
model <- randomForest(BMI_Category ~ . -Age -Pregnancies, data = train, ntree = 100, mtry=3)
model
prediction_test <- predict(model, newdata = test)
prediction_train <- predict(model, newdata = train)
table(prediction_train, train$BMI_Category)
table(prediction_test, test$BMI_Category)
results<-cbind(prediction_test, test$BMI_Category)
head(results)
accuracy_test <- mean(prediction_test == test$BMI_Category)
accuracy_train <- mean(prediction_train == train$BMI_Category)
paste("độ chính xác trên tập train: ", accuracy_train)
paste("độ chính xác trên tập test: ", accuracy_test)
library(knitr)
# Vẽ biểu đồ histogram
ggplot(diabetes_filter, aes(x = BMI)) +
geom_histogram(binwidth = 2, fill = "lightblue", color = "black") +
labs(x = "BMI", title = "Histogram of BMI") + theme_minimal()
# summary statistics
kable(summary(select(diabetes_filter, BMI)), format = "markdown")
# Tính độ lệch chuẩn của mẫu dữ liệu
standard_deviation <- sd(diabetes_filter$BMI)
print(standard_deviation)
t.test(num_diabetes[num_diabetes$Outcome==1,6], mu=34)
# Vẽ biểu đồ histogram
ggplot(diabetes_filter, aes(x = BMI_Category)) +
geom_bar(stat = "count") +
labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
theme_bw()
#lấy ra những người bệnh và không bệnh có chỉ số BMI_Category >= 3
sick <- num_diabetes[num_diabetes$Outcome==1 & num_diabetes$BMI_Category >= 3,6]
normal <- num_diabetes[num_diabetes$Outcome==0 & num_diabetes$BMI_Category >= 3,6]
length(sick)
length(normal)
# Tính độ lệch chuẩn của mỗi mẫu dữ liệu
sa <- sd(sick)
print(sa)
sb <- sd(normal)
print(sb)
# Kiểm tra đồng nhất về phương sai
result <- var.test(sick, normal)
print(result)
t.test(normal,sick,var.equal=FALSE)
# Vẽ biểu đồ histogram
ggplot(num_diabetes, aes(x = Age)) +
geom_histogram(binwidth = 2, fill = "lightblue", color = "black") +
labs(x = "Age", title = "Histogram of Age") +
theme_minimal()
# summary statistics
kable(summary(select(diabetes, Age)), format = "markdown")
t.test(num_diabetes[num_diabetes$Outcome==1,8], mu=35)
# creating correlation matrix
corr_mat <- round(cor(diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(lattice)
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(num_diabetes),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
# head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
